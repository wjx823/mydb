(load "rmresign")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; AllTooEasyAI 1.1
;    Written by Ric Shurtz (AllTooEasy_)
;    December 2000 
;    Copyright © 2000 Ric Shurtz (shurtz@knology.net)
;
; This was developed to compete in the AOK:TC AI Tournament League Tournament #1
;    http://aileague.xhounds.com/
;
; Only exact copies of this code should be named AllTooEasyAI.  If you use this 
; code in your own scripts or scenario, please credit the author.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; strategy number defaults
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(true)
=>
	(set-strategic-number sn-number-explore-groups 1)
	(set-strategic-number sn-percentage-explore-exterminators 0)
	(set-strategic-number sn-blot-exploration-map 0)
	(set-strategic-number sn-intelligent-gathering 1)
	(set-strategic-number sn-random-placement-factor 10)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-percent-civilian-builders 25)
	(set-strategic-number sn-percent-civilian-gatherers 0)
	(set-strategic-number sn-percent-civilian-explorers 75)
	(set-strategic-number sn-maximum-food-drop-distance 20)
	(set-strategic-number sn-maximum-hunt-drop-distance 20)
	(set-strategic-number sn-maximum-gold-drop-distance 20)
	(set-strategic-number sn-maximum-stone-drop-distance 20)
	(set-strategic-number sn-minimum-boar-hunt-group-size 8)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-food-dropsite-distance 5)
	(set-strategic-number sn-wood-dropsite-distance 5)
	(set-strategic-number sn-stone-dropsite-distance 7)
	(set-strategic-number sn-gold-dropsite-distance 7)
	(set-strategic-number sn-maximum-hunt-drop-distance 15)
)

(defrule
	(true)
=>
	(set-strategic-number sn-attack-winning-player 0)
	(set-strategic-number sn-attack-winning-player-factor 1)
	(set-strategic-number sn-attack-intelligence 1)
	(set-strategic-number sn-attack-group-gather-spacing 6)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-minimum-attack-group-size 8)
	(set-strategic-number sn-maximum-attack-group-size 15)
	(set-strategic-number sn-minimum-defend-group-size 8)
	(set-strategic-number sn-maximum-defend-group-size 15)
	(set-strategic-number sn-percent-enemy-sighted-response 100)
	(set-strategic-number sn-enemy-sighted-response-distance 50)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-coop-share-information 1)
	(set-strategic-number sn-coop-share-attacking 1)
	(set-strategic-number sn-coop-share-attacking-interval 1)
	(set-strategic-number sn-ignore-attack-group-under-attack 1)
	(set-strategic-number sn-group-commander-selection-method 2)
	(set-strategic-number sn-consecutive-idle-unit-limit 1)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-target-evaluation-distance 32)
	(set-strategic-number sn-target-evaluation-hitpoints 4)
	(set-strategic-number sn-target-evaluation-damage-capability 16)
	(set-strategic-number sn-target-evaluation-kills 8)
	(set-strategic-number sn-target-evaluation-ally-proximity 4)
	(set-strategic-number sn-target-evaluation-rof 0)
	(set-strategic-number sn-target-evaluation-time-kill-ratio 100)
	(set-strategic-number sn-target-evaluation-in-progress 2)
	(set-strategic-number sn-target-evaluation-randomness 0)
	(set-strategic-number sn-target-evaluation-attack-attempts 0)
	(set-strategic-number sn-target-evaluation-range 32)
	(set-strategic-number sn-target-evaluation-siege-weapon 20)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-gold-defend-priority 1)
	(set-strategic-number sn-relic-defend-priority 2)
	(set-strategic-number sn-stone-defend-priority 3)
	(set-strategic-number sn-town-defend-priority 4)
	(set-strategic-number sn-gather-defense-units 1)
	(set-strategic-number sn-group-form-distance 25)
	(disable-self)
)

(defrule
	(true)
=>
	(set-strategic-number sn-special-attack-type1 0)
	(disable-self)
)

(defrule
	(enemy-captured-relics)
=>
	(set-strategic-number sn-special-attack-type1 1)
	(disable-self)
)

(defrule
	(true)
=>
    (set-strategic-number sn-do-not-scale-for-difficulty-level 1)
	(disable-self)
)

(defrule
	(or
		(resource-found food)
		(game-time > 60)
	)
=>
	(set-strategic-number sn-cap-civilian-explorers 0)
	(set-strategic-number sn-cap-civilian-gatherers 100)
	(set-strategic-number sn-percent-civilian-builders 20)
	(set-strategic-number sn-percent-civilian-gatherers 80)
	(set-strategic-number sn-percent-civilian-explorers 0)
	(set-strategic-number sn-food-gatherer-percentage  75)
	(set-strategic-number sn-gold-gatherer-percentage  0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
	(set-strategic-number sn-wood-gatherer-percentage  25)
	(disable-self)
)

(defrule
	(game-time > 300)
=>
	(set-strategic-number sn-cap-civilian-builders 15)
	(disable-self)
)

(defrule
	(game-time > 2100)
=>
	(set-strategic-number sn-blot-exploration-map 1)
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; economy constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst MIN-VILLAGERS-TO-ESCROW 20)
(defconst DARK-AGE-VILLAGERS 28)
(defconst FEUDAL-AGE-VILLAGERS 40)
(defconst CASTLE-AGE-VILLAGERS 75)
(defconst IMPERIAL-AGE-VILLAGERS 50)

(defconst MAX-FARMS 50)

(defconst DARK-AGE 1)
(defconst FEUDAL-AGE 2)
(defconst CASTLE-AGE 3)
(defconst IMPERIAL-AGE 4)

(defconst DARK-AGE-FOOD-GOAL 700)
(defconst DARK-AGE-WOOD-GOAL 200)

(defconst FEUDAL-AGE-FOOD-GOAL 1500)
(defconst FEUDAL-AGE-WOOD-GOAL 1000)
(defconst FEUDAL-AGE-GOLD-GOAL 800)
(defconst FEUDAL-AGE-STONE-GOAL 200)

(defconst CASTLE-AGE-FOOD-GOAL 2500)
(defconst CASTLE-AGE-WOOD-GOAL 1000)
(defconst CASTLE-AGE-GOLD-GOAL 700)
(defconst CASTLE-AGE-STONE-GOAL 650)

(defconst IMPERIAL-AGE-FOOD-GOAL 2500)
(defconst IMPERIAL-AGE-WOOD-GOAL 2000)
(defconst IMPERIAL-AGE-GOLD-GOAL 1500)
(defconst IMPERIAL-AGE-STONE-GOAL 650)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst ATTACK-TIMER 1)
(defconst RESOURCE-DBG-TIMER 2)
(defconst RESEARCH-DBG-TIMER 3)
(defconst RESOURCE-DBG-TIMER-INT 10)
(defconst RESEARCH-DBG-TIMER-INT 60)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; excess constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst MAX-FOOD 2600)
(defconst MAX-WOOD 3000)
(defconst SELL-MAX-WOOD 4000)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; military constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst MIN-SIEGE-SOLDIERS 40)

(defconst DEFEND-SPEARMAN-COUNT 0)
(defconst DEFEND-MILITIA-COUNT 0)
(defconst DEFEND-SKIRMISHER-COUNT 0)
(defconst DEFEND-ARCHER-COUNT 0)

; barracks
(defconst SPEARMAN-COUNT 0)
(defconst MILITIA-COUNT 0)
(defconst EAGLE-WARRIOR-COUNT 30)
(defconst FEUDAL-BARRACKS 1)
(defconst CASTLE-BARRACKS 3)
(defconst MAX-BARRACKS 10)
; archery
(defconst SKIRMISHER-COUNT 0)
(defconst ARCHER-COUNT 0)
(defconst HAND-CANNONEER-COUNT 10)
(defconst CAVALRY-ARCHER-COUNT 0)
(defconst FEUDAL-ARCHERY-RANGES 1)
(defconst CASTLE-ARCHERY-RANGES 3)
(defconst MAX-ARCHERY-RANGES 10)
; stable
(defconst KNIGHT-COUNT 20)
(defconst CAMEL-COUNT 0)
(defconst SCOUT-CAVALRY-COUNT 10)
(defconst CASTLE-STABLES 3)
(defconst MAX-STABLES 10)
; siege
(defconst SCORPION-COUNT 15)
(defconst MANGONEL-COUNT 5)
(defconst RAM-COUNT 5)
(defconst CASTLE-SIEGE-WORKSHOPS 2)
(defconst MAX-SIEGE-WORKSHOPS 6)
; castle
(defconst UNIQUE-UNIT-COUNT 5)
(defconst TREBUCHET-COUNT 3)
(defconst PETARD-COUNT 3)
; monastery
(defconst MONK-COUNT 10)
(defconst MISSIONARY-COUNT 5)
(defconst CASTLE-MONASTERIES 2)
; towers
(defconst OUTPOSTS 4)
(defconst WATCH-TOWERS 5)
; dock
(defconst TRADE-COG-COUNT 0)
(defconst CANNON-GALLEON-COUNT 0)
(defconst DEMO-SHIP-COUNT 0)
(defconst FIRE-SHIP-COUNT 0)
(defconst GALLEY-COUNT 0)
(defconst LONGBOAT-COUNT 0)
(defconst TURTLE-SHIP-COUNT 0)
; market
(defconst TRADE-CART-COUNT 3)
; gates
(defconst GATE-COUNT 6)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; research constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; barracks
(defconst SPEARMAN-RESEARCH 5)
(defconst MILITIA-RESEARCH 5)
(defconst EAGLE-WARRIOR-RESEARCH 5)
; archery
(defconst SKIRMISHER-RESEARCH 5)
(defconst ARCHER-RESEARCH 5)
; stable
(defconst KNIGHT-RESEARCH 5)
(defconst CAMEL-RESEARCH 5)
(defconst SCOUT-CAVALRY-RESEARCH 5)
(defconst CAVALRY-ARCHER-RESEARCH 5)
; siege
(defconst RAM-RESEARCH 5)
(defconst MANGONEL-RESEARCH 2)
(defconst SCORPION-RESEARCH 3)
; castle
(defconst UNIQUE-UNIT-RESEARCH 5)
; monastery
(defconst MONK-RESEARCH 2)
; market
(defconst TRADE-CART-RESEARCH 3)

#load-if-defined AZTEC-CIV
(defconst DEFENDER eagle-warrior-line)
#end-if
#load-if-defined BRITON-CIV
(defconst DEFENDER archer-line)
#end-if
#load-if-defined BYZANTINE-CIV
(defconst DEFENDER camel-line)
#end-if
#load-if-defined CELTIC-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined CHINESE-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined FRANKISH-CIV
(defconst DEFENDER knight-line)
#end-if
#load-if-defined GOTHIC-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined HUN-CIV
(defconst DEFENDER cavalry-archer-line)
#end-if
#load-if-defined JAPANESE-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined KOREAN-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined MAYAN-CIV
(defconst DEFENDER eagle-warrior-line)
#end-if
#load-if-defined MONGOL-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined PERSIAN-CIV
(defconst DEFENDER knight-line)
#end-if
#load-if-defined SARACEN-CIV
(defconst DEFENDER camel-line)
#end-if
#load-if-defined SPANISH-CIV
(defconst DEFENDER knight-line)
#end-if
#load-if-defined TEUTONIC-CIV
(defconst DEFENDER knight-line)
#end-if
#load-if-defined TURKISH-CIV
(defconst DEFENDER militiaman-line)
#end-if
#load-if-defined VIKING-CIV 
(defconst DEFENDER militiaman-line)
#end-if

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; TECH GOAL values
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst RI-LOOM 1)
(defconst RI-DOUBLE-BIT-AXE 2)
(defconst RI-HORSE-COLLAR 3)
(defconst RI-GOLD-MINING 4)
(defconst RI-STONE-MINING 5)
(defconst RI-CARTOGRAPHY 6)
(defconst RI-COINAGE 7)
(defconst RI-WHEEL-BARROW 8)
(defconst RI-BOW-SAW 9)
(defconst RI-HEAVY-PLOW 10)
(defconst RI-BANKING 11)
(defconst RI-CONSCRIPTION 12)
(defconst RI-GOLD-SHAFT-MINING 13)
(defconst RI-STONE-SHAFT-MINING 14)
(defconst RI-CARAVAN 15)
(defconst RI-CROP-ROTATION 16)
(defconst RI-GUILDS 17)
(defconst RI-HAND-CART 18)
(defconst RI-TWO-MAN-SAW 19)
(defconst RI-SAPPERS 20)
(defconst RI-FLETCHING 21)
(defconst RI-BODKIN-ARROW 22)
(defconst RI-MURDER-HOLES 23)
(defconst RI-BALLISTICS 24)
(defconst RI-BRACER 25)
(defconst RI-CHEMISTRY 26)
(defconst RI-PADDED-ARCHER-ARMOR 27)
(defconst RI-CROSSBOW 28)
(defconst RI-LEATHER-ARCHER-ARMOR 29)
(defconst RI-ELITE-SKIRMISHER 30)
(defconst RI-RING-ARCHER-ARMOR 31)
(defconst RI-THUMB-RING 32)
(defconst RI-ARBALEST 33)
(defconst RI-HEAVY-CAVALRY-ARCHER 34)
(defconst RI-TRACKING 35)
(defconst RI-SCALE-MAIL 36)
(defconst RI-MAN-AT-ARMS 37)
(defconst RI-FORGING 38)
(defconst RI-SQUIRES 39)
(defconst RI-LONG-SWORDSMAN 40)
(defconst RI-CHAIN-MAIL 41)
(defconst RI-PIKEMAN 42)
(defconst RI-IRON-CASTING 43)
(defconst RI-TWO-HANDED-SWORDSMAN 44)
(defconst RI-PLATE-MAIL 45)
(defconst RI-BLAST-FURNACE 46)
(defconst RI-HALBERDIER 47)
(defconst RI-CHAMPION 48)
(defconst RI-ELITE-EAGLE-WARRIOR 49)
(defconst RI-SCALE-BARDING 50)
(defconst RI-LIGHT-CAVALRY 51)
(defconst RI-BLOODLINES 52)
(defconst RI-HUSBANDRY 53)
(defconst RI-CHAIN-BARDING 54)
(defconst RI-PLATE-BARDING 55)
(defconst RI-CAVALIER 56)
(defconst RI-HEAVY-CAMEL 57)
(defconst RI-HUSSAR 58)
(defconst RI-PALADIN 59)
(defconst RI-PARTHIAN-TACTICS 60)
(defconst RI-CAPPED-RAM 61)
(defconst RI-SIEGE-ENGINEERS 62)
(defconst RI-ONAGER 63)
(defconst RI-SIEGE-RAM 64)
(defconst RI-HEAVY-SCORPION 65)
(defconst RI-SIEGE-ONAGER 66)
(defconst RI-GUARD-TOWER 67)
(defconst RI-KEEP 68)
(defconst RI-BOMBARD-TOWER 69)
(defconst RI-TOWN-WATCH 70)
(defconst RI-MASONRY 71)
(defconst RI-ARCHITECTURE 72)
(defconst RI-STONECUTTING 73)
(defconst RI-TOWN-PATROL 74)
(defconst RI-HOARDINGS 75)
(defconst RI-ILLUMINATION 76)
(defconst RI-SANCTITY 77)
(defconst RI-FERVOR 78)
(defconst RI-BLOCK-PRINTING 79)
(defconst RI-ATONEMENT 80)
(defconst RI-HERBAL-MEDICINE 81)
(defconst RI-REDEMPTION 82)
(defconst RI-HERESY 83)
(defconst RI-THEOCRACY 84)
(defconst RI-FAITH 85)
(defconst DONE 100)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; single pass variables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst NEED-FOOD                    1) ; shared goal also
(defconst NEED-WOOD                    2) ; shared goal also
(defconst NEED-GOLD                    3) ; shared goal also
(defconst NEED-STONE                   4) ; shared goal also
(defconst ESCROW-FOOD                  5)
(defconst ESCROW-WOOD                  6)
(defconst ESCROW-GOLD                  7)
(defconst ESCROW-STONE                 8)
(defconst BUILD-FARM                   9)
(defconst BUILD-SIEGE                  10)
(defconst WERE-WINNING                 11)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; persistent variables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst ALLY-BUILD                   20) ; shared goal also
(defconst AGE-GOAL                     21)
(defconst NEXT-VILLAGER-UPGRADE        22)
(defconst BUILD-ARMY                   23)
(defconst ATTACK                       24) ; shared goal
(defconst ATTACK-TIMER-ENABLED         25)
(defconst RUSH-COUNT                   26)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; research variables
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst DO-RUSH-RESEARCH             27)
(defconst DO-INFANTRY-RESEARCH         28)
(defconst DO-ARCHER-RESEARCH           29)
(defconst DO-CAVALRY-RESEARCH          30)
(defconst DO-CAVALRY-ARCHER-RESEARCH   31)
(defconst NEXT-ECONOMIC-TECH           32)
(defconst NEXT-MISSILE-TECH            33)
(defconst NEXT-ARCHER-TECH             34)
(defconst NEXT-INFANTRY-TECH           35)
(defconst NEXT-CAVALRY-TECH            36)
(defconst NEXT-SIEGE-TECH              37)
(defconst NEXT-TOWER-TECH              38)
(defconst NEXT-BUILDING-TECH           39)
(defconst NEXT-MONK-TECH               40)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; init goals
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(true)
=>
	(set-goal NEED-FOOD 0)
	(set-goal NEED-WOOD 0)
	(set-goal NEED-GOLD 0)
	(set-goal NEED-STONE 0)
	(set-goal ESCROW-FOOD 0)
	(set-goal ESCROW-WOOD 0)
	(set-goal ESCROW-GOLD 0)
	(set-goal ESCROW-STONE 0)
	(set-goal RUSH-COUNT 0)
	(disable-self)
)

(defrule
	(true)
=>
	(set-goal AGE-GOAL DARK-AGE)
	(set-goal BUILD-ARMY 0)
	(set-goal BUILD-SIEGE 0)
	(set-goal ATTACK-TIMER-ENABLED 0)
	(set-goal DO-RUSH-RESEARCH 0)
	(set-goal DO-INFANTRY-RESEARCH 0)
	(set-goal DO-ARCHER-RESEARCH 0)
	(set-goal DO-CAVALRY-RESEARCH 0)
	(set-goal ALLY-BUILD 0)
	(disable-self)
)

(defrule
	(true)
=>
	(set-shared-goal NEED-FOOD 0)
	(set-shared-goal NEED-WOOD 0)
	(set-shared-goal NEED-GOLD 0)
	(set-shared-goal NEED-STONE 0)
	(set-shared-goal ALLY-BUILD 0)
	(set-shared-goal ATTACK 0)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; age advancement
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age == dark-age)
	(unit-type-count-total villager >= DARK-AGE-VILLAGERS)
	(can-research-with-escrow feudal-age)
=>
	(release-escrow food)
	(research feudal-age)
	(set-goal AGE-GOAL FEUDAL-AGE)
	(set-goal ESCROW-FOOD 0)
	(chat-local-to-self "fuedal")
	(disable-self)
)

(defrule
	(current-age == feudal-age)
	(can-research-with-escrow castle-age)
=>
	(release-escrow food)
	(release-escrow gold)
	(research castle-age)
	(set-goal AGE-GOAL CASTLE-AGE)
	(set-goal ESCROW-FOOD 0)
	(set-goal ESCROW-GOLD 0)
	(chat-local-to-self "castle")
	(disable-self)
)

(defrule
	(current-age == castle-age)
	(can-research-with-escrow imperial-age)
=>
	(release-escrow food)
	(release-escrow gold)
	(research imperial-age)
	(set-goal AGE-GOAL IMPERIAL-AGE)
	(set-goal ESCROW-FOOD 0)
	(set-goal ESCROW-GOLD 0)
	(chat-local-to-self "imperial")
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; escrow for age advancement
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(unit-type-count-total villager >= MIN-VILLAGERS-TO-ESCROW)
	(research-available feudal-age)
=>
	(set-goal ESCROW-FOOD 1)
)

(defrule
	(research-available feudal-age)
	(escrow-amount food > 500)
=>
	(set-goal ESCROW-FOOD 0)
)

(defrule
	(research-available castle-age)
=>
	(set-goal ESCROW-FOOD 1)
	(set-goal ESCROW-GOLD 1)
)

(defrule
	(research-available castle-age)
	(escrow-amount food > 800)
=>
	(set-goal ESCROW-FOOD 0)
)

(defrule
	(research-available castle-age)
	(escrow-amount gold > 200)
=>
	(set-goal ESCROW-GOLD 0)
)

(defrule
	(research-available imperial-age)
=>
	(set-goal ESCROW-FOOD 1)
	(set-goal ESCROW-GOLD 1)
)

(defrule
	(research-available imperial-age)
	(escrow-amount food > 1000)
=>
	(set-goal ESCROW-FOOD 0)
)

(defrule
	(research-available imperial-age)
	(escrow-amount gold > 800)
=>
	(set-goal ESCROW-GOLD 0)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; default town size
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age == dark-age)
=>
	(set-strategic-number sn-maximum-town-size 12)
	(set-strategic-number sn-camp-max-distance 12)
	(set-strategic-number sn-mill-max-distance 20)
	(disable-self)
)

(defrule
	(current-age == castle-age)
=>
	(set-strategic-number sn-maximum-town-size 25)
	(set-strategic-number sn-camp-max-distance 25)
	(set-strategic-number sn-mill-max-distance 30)
	(disable-self)
)


(defrule
	(current-age == imperial-age)
=>
	(set-strategic-number sn-maximum-town-size 45)
	(set-strategic-number sn-camp-max-distance 45)
	(set-strategic-number sn-mill-max-distance 50)
	(disable-self)
)

(defrule
	(game-time > 3600)
=>
	(set-strategic-number sn-maximum-town-size 75)
	(set-strategic-number sn-camp-max-distance 75)
	(set-strategic-number sn-mill-max-distance 75)
	(disable-self)
)

(defrule
	(game-time > 4500)
=>
	(set-strategic-number sn-maximum-town-size 100)
	(set-strategic-number sn-camp-max-distance 100)
	(set-strategic-number sn-mill-max-distance 100)
	(disable-self)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; resource goals
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
; dark-age goals
;
(defrule
	(goal AGE-GOAL DARK-AGE)
	(food-amount < DARK-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 1)
)

(defrule
	(goal AGE-GOAL DARK-AGE)
	(food-amount > DARK-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 0)
)

(defrule
	(goal AGE-GOAL DARK-AGE)
	(wood-amount < DARK-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 1)
)

(defrule
	(goal AGE-GOAL DARK-AGE)
	(wood-amount > DARK-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 0)
)

;
; feudal-age goals
;
(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(food-amount < FEUDAL-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 1)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(food-amount > FEUDAL-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 0)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(wood-amount < FEUDAL-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 1)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(wood-amount > FEUDAL-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 0)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(gold-amount < FEUDAL-AGE-GOLD-GOAL)
=>
	(set-goal NEED-GOLD 1)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(gold-amount > FEUDAL-AGE-GOLD-GOAL)
=>
	(set-goal NEED-GOLD 0)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(stone-amount < FEUDAL-AGE-STONE-GOAL)
=>
	(set-goal NEED-STONE 1)
)

(defrule
	(goal AGE-GOAL FEUDAL-AGE)
	(stone-amount > FEUDAL-AGE-STONE-GOAL)
=>
	(set-goal NEED-STONE 0)
)

;
; castle-age goals
;
(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(food-amount < CASTLE-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 1)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(food-amount > CASTLE-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 0)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(wood-amount < CASTLE-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 1)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(wood-amount > CASTLE-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 0)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(gold-amount < CASTLE-AGE-GOLD-GOAL)
=>
	(set-goal NEED-GOLD 1)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(gold-amount > CASTLE-AGE-GOLD-GOAL)
=>
	(set-goal NEED-GOLD 0)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(stone-amount < CASTLE-AGE-STONE-GOAL)
=>
	(set-goal NEED-STONE 1)
)

(defrule
	(goal AGE-GOAL CASTLE-AGE)
	(stone-amount > CASTLE-AGE-STONE-GOAL)
=>
	(set-goal NEED-STONE 0)
)

;
; imperial-age goals
;
(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(food-amount < IMPERIAL-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 1)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(food-amount > IMPERIAL-AGE-FOOD-GOAL)
=>
	(set-goal NEED-FOOD 0)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(wood-amount < IMPERIAL-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 1)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(wood-amount > IMPERIAL-AGE-WOOD-GOAL)
=>
	(set-goal NEED-WOOD 0)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(gold-amount < IMPERIAL-AGE-GOLD-GOAL)
=>
	(set-goal NEED-GOLD 1)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(gold-amount > IMPERIAL-AGE-GOLD-GOAL)
=>
	(set-goal NEED-GOLD 0)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(stone-amount < IMPERIAL-AGE-STONE-GOAL)
=>
	(set-goal NEED-STONE 1)
)

(defrule
	(goal AGE-GOAL IMPERIAL-AGE)
	(stone-amount > IMPERIAL-AGE-STONE-GOAL)
=>
	(set-goal NEED-STONE 0)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; build necessary housing
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(true)
=>
	(set-strategic-number sn-initial-exploration-required 0)
	(disable-self)
)

;
; maintain housing
;
(defrule
	(current-age <= castle-age)
	(housing-headroom < 4)
	(population-headroom > 0)
	(can-build house)
=>
	(build house)
	(chat-local-to-self "house")
)

(defrule
	(current-age == imperial-age)
	(housing-headroom < 10)
	(population-headroom > 0)
	(can-build house)
=>
	(build house)
	(chat-local-to-self "house")
)

(defrule
	(current-age >= castle-age)
	(building-type-count-total town-center < 3)
=>
	(set-goal ESCROW-WOOD 1)
	(set-goal ESCROW-STONE 1)
)

(defrule
	(current-age >= castle-age)
	(building-type-count-total town-center >= 3)
=>
	(set-goal ESCROW-WOOD 0)
	(set-goal ESCROW-STONE 0)
)

;#load-if-not-defined TEAMS-LOCKED
;(defrule
;	(goal ALLY-BUILD 1)
;=>
;	(set-stance every-enemy ally)
;	(set-stance every-neutral enemy)
;	(set-goal ALLY-BUILD 0) ; stance back to normal
;	(set-shared-goal ALLY-BUILD 0) ; signal allies that its ok to build
;)

;(defrule
;	(shared-goal ALLY-BUILD 0)
;	(building-type-count-total town-center < 2)
;	(can-build-with-escrow town-center)
;=>
;	(set-shared-goal ALLY-BUILD 1) ; tell allies to not build
;	(set-goal ALLY-BUILD 1) ; set-stance back next pass 
;	(set-stance every-enemy neutral)
;	(set-stance every-ally enemy)
;	(release-escrow wood)
;	(release-escrow stone)
;	(build-forward town-center)
;	(chat-local-to-self "town-center near ally")
;)
;#end-if

(defrule
	(building-type-count-total town-center < 3)
	(can-build-with-escrow town-center)
=>
	(release-escrow wood)
	(release-escrow stone)
	(build town-center)
	(chat-local-to-self "town-center")
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; villager upgrade priorities
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; LOOM (I) - 50G
(defconst LOOM						0)
(defconst LOOM-A					1)
(defconst LOOM-AGE dark-age)

; WHEEL-BARROW (II) - 175F, 50W
(defconst WHEEL-BARROW				1)
(defconst WHEEL-BARROW-A			2)
(defconst WHEEL-BARROW-AGE feudal-age)

; DOUBLE-BIT-AXE (II) - 100F, 50W
(defconst DOUBLE-BIT-AXE			2)
(defconst DOUBLE-BIT-AXE-A			3)
(defconst DOUBLE-BIT-AXE-AGE feudal-age)

; GOLD-MINING (II) - 100F, 75W
(defconst GOLD-MINING				3)
(defconst GOLD-MINING-A				4)
(defconst GOLD-MINING-AGE feudal-age)

; STONE-MINING (II) - 100F, 75W
(defconst STONE-MINING				4)
(defconst STONE-MINING-A			5)
(defconst STONE-MINING-AGE castle-age)

; HAND-CART (III) - 300F, 200W
(defconst HAND-CART					5)
(defconst HAND-CART-A				6)
(defconst HAND-CART-AGE castle-age)

; BOW-SAW (III) - 150F, 100W
(defconst BOW-SAW					6)
(defconst BOW-SAW-A					7)
(defconst BOW-SAW-AGE castle-age)

; GOLD-SHAFT-MINING (III) - 200F, 150W
(defconst GOLD-SHAFT-MINING			7)
(defconst GOLD-SHAFT-MINING-A		8)
(defconst GOLD-SHAFT-MINING-AGE imperial-age)

; STONE-SHAFT-MINING (III) - 200F, 150W
(defconst STONE-SHAFT-MINING		8)
(defconst STONE-SHAFT-MINING-A		9)
(defconst STONE-SHAFT-MINING-AGE imperial-age)

; TWO-MAN-SAW (IV) - 300F, 200W
(defconst TWO-MAN-SAW				9)
(defconst TWO-MAN-SAW-A				10)
(defconst TWO-MAN-SAW-AGE imperial-age)

; initialize goal
(defrule
	(true)
=>
	(set-goal NEXT-VILLAGER-UPGRADE LOOM)
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; villager upgrades
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; strengthen
(defrule
	(current-age >= LOOM-AGE)
	(goal NEXT-VILLAGER-UPGRADE LOOM)
	(can-research ri-loom)
	(not (can-train villager))
=>
	(set-goal NEXT-VILLAGER-UPGRADE LOOM-A)
	(research ri-loom)
	(chat-local-to-self "loom")
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; all around rate
(defrule
	(current-age >= WHEEL-BARROW-AGE)
	(goal NEXT-VILLAGER-UPGRADE WHEEL-BARROW)
	(can-research ri-wheel-barrow)
=>
	(set-goal NEXT-VILLAGER-UPGRADE WHEEL-BARROW-A)
	(research ri-wheel-barrow)
	(chat-local-to-self "wheel-barrow")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE WHEEL-BARROW)
	(research-completed ri-wheel-barrow)
=>
	(set-goal NEXT-VILLAGER-UPGRADE WHEEL-BARROW-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age >= HAND-CART-AGE)
	(goal NEXT-VILLAGER-UPGRADE HAND-CART)
	(can-research ri-hand-cart)
=>
	(set-goal NEXT-VILLAGER-UPGRADE HAND-CART-A)
	(research ri-hand-cart)
	(chat-local-to-self "hand-cart")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE HAND-CART)
	(research-completed ri-hand-cart)
=>
	(set-goal NEXT-VILLAGER-UPGRADE HAND-CART-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; wood rate
(defrule
	(current-age >= DOUBLE-BIT-AXE-AGE)
	(goal NEXT-VILLAGER-UPGRADE DOUBLE-BIT-AXE)
	(can-research ri-double-bit-axe)
=>
	(set-goal NEXT-VILLAGER-UPGRADE DOUBLE-BIT-AXE-A)
	(research ri-double-bit-axe)
	(chat-local-to-self "double-bit-axe")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE DOUBLE-BIT-AXE)
	(research-completed ri-double-bit-axe)
=>
	(set-goal NEXT-VILLAGER-UPGRADE DOUBLE-BIT-AXE-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age >= BOW-SAW-AGE)
	(goal NEXT-VILLAGER-UPGRADE BOW-SAW)
	(can-research ri-bow-saw)
=>
	(set-goal NEXT-VILLAGER-UPGRADE BOW-SAW-A)
	(research ri-bow-saw)
	(chat-local-to-self "bow-saw")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE BOW-SAW)
	(research-completed ri-bow-saw)
=>
	(set-goal NEXT-VILLAGER-UPGRADE BOW-SAW-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age >= TWO-MAN-SAW-AGE)
	(goal NEXT-VILLAGER-UPGRADE TWO-MAN-SAW)
	(can-research ri-two-man-saw)
=>
	(set-goal NEXT-VILLAGER-UPGRADE TWO-MAN-SAW-A)
	(research ri-two-man-saw)
	(chat-local-to-self "two-man-saw")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE TWO-MAN-SAW)
	(current-age >= imperial-age)
	(not (research-available ri-two-man-saw))
=>
	(set-goal NEXT-VILLAGER-UPGRADE TWO-MAN-SAW-A)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE TWO-MAN-SAW)
	(research-completed ri-two-man-saw)
=>
	(set-goal NEXT-VILLAGER-UPGRADE TWO-MAN-SAW-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; gold rate
(defrule
	(current-age >= GOLD-MINING-AGE)
	(goal NEXT-VILLAGER-UPGRADE GOLD-MINING)
	(can-research ri-gold-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE GOLD-MINING-A)
	(research ri-gold-mining)
	(chat-local-to-self "gold-mining")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE GOLD-MINING)
	(research-completed ri-gold-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE GOLD-MINING-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age >= GOLD-SHAFT-MINING-AGE)
	(goal NEXT-VILLAGER-UPGRADE GOLD-SHAFT-MINING)
	(can-research ri-gold-shaft-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE GOLD-SHAFT-MINING-A)
	(research ri-gold-shaft-mining)
	(chat-local-to-self "gold-shaft-mining")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE GOLD-SHAFT-MINING)
	(current-age >= castle-age)
	(not (research-available ri-gold-shaft-mining))
=>
	(set-goal NEXT-VILLAGER-UPGRADE GOLD-SHAFT-MINING-A)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE GOLD-SHAFT-MINING)
	(research-completed ri-gold-shaft-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE GOLD-SHAFT-MINING-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; stone rate
(defrule
	(current-age >= STONE-MINING-AGE)
	(goal NEXT-VILLAGER-UPGRADE STONE-MINING)
	(can-research ri-stone-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE STONE-MINING-A)
	(research ri-stone-mining)
	(chat-local-to-self "stone-mining")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE STONE-MINING)
	(research-completed ri-stone-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE STONE-MINING-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age >= STONE-SHAFT-MINING-AGE)
	(goal NEXT-VILLAGER-UPGRADE STONE-SHAFT-MINING)
	(can-research ri-stone-shaft-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE STONE-SHAFT-MINING-A)
	(research ri-stone-shaft-mining)
	(chat-local-to-self "stone-shaft-mining")
	(disable-self)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE STONE-SHAFT-MINING)
	(current-age >= castle-age)
	(not (research-available ri-stone-shaft-mining))
=>
	(set-goal NEXT-VILLAGER-UPGRADE STONE-SHAFT-MINING-A)
)

(defrule
	(goal NEXT-VILLAGER-UPGRADE STONE-SHAFT-MINING)
	(research-completed ri-stone-shaft-mining)
=>
	(set-goal NEXT-VILLAGER-UPGRADE STONE-SHAFT-MINING-A)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; required buildings for feudal
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age == dark-age)
	(not (research-available feudal-age))
	(wood-amount > DARK-AGE-WOOD-GOAL)
	(building-type-count-total mill < 1)
	(can-build mill)
=>
	(build mill)
	(chat-local-to-self "mill age required")
	(disable-self)
)

(defrule
	(current-age == dark-age)
	(not (research-available feudal-age))
	(wood-amount > DARK-AGE-WOOD-GOAL)
	(building-type-count-total lumber-camp < 1)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(chat-local-to-self "lumber-camp age required")
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; required buildings for castle
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age == feudal-age)
	(not (research-available castle-age))
	(wood-amount > FEUDAL-AGE-WOOD-GOAL)
	(building-type-count-total barracks < 1)
	(can-build barracks)
=>
	(build barracks)
	(chat-local-to-self "barracks archery-range required")
	(disable-self)
)

(defrule
	(current-age == feudal-age)
	(not (research-available castle-age))
	(wood-amount > FEUDAL-AGE-WOOD-GOAL)
	(building-type-count-total archery-range < 1)
	(can-build archery-range)
=>
	(build archery-range)
	(chat-local-to-self "archery-range age required")
	(disable-self)
)

(defrule
	(current-age == feudal-age)
	(not (research-available castle-age))
	(wood-amount > FEUDAL-AGE-WOOD-GOAL)
	(building-type-count-total blacksmith < 1)
	(can-build blacksmith)
=>
	(build blacksmith)
	(chat-local-to-self "blacksmith age required")
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; required buildings for imperial
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(not (town-under-attack))
	(not (research-available imperial-age))
	(building-type-count-total castle < 1)
	(can-build castle)
=>
	(build castle)
	(chat-local-to-self "castle age required")
	(disable-self)
)

(defrule
	(not (research-available imperial-age))
	(building-type-count-total monastery < 1)
	(can-build monastery)
=>
	(build monastery)
	(chat-local-to-self "monastery age required")
	(disable-self)
)

(defrule
	(not (research-available imperial-age))
	(wood-amount > CASTLE-AGE-WOOD-GOAL)
	(building-type-count-total siege-workshop < 1)
	(can-build siege-workshop)
=>
	(build siege-workshop)
	(chat-local-to-self "siege-workshop age required")
	(disable-self)
)

(defrule
	(not (research-available imperial-age))
	(wood-amount > CASTLE-AGE-WOOD-GOAL)
	(building-type-count-total university < 1)
	(can-build university)
=>
	(build university)
	(chat-local-to-self "university age required")
	(disable-self)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; determine if were winning
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(true)
=>
	(set-goal WERE-WINNING 0)
)

(defrule
	(current-score > 2000)
	(players-score every-enemy < 2000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 3000)
	(players-score every-enemy < 3000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 4000)
	(players-score every-enemy < 4000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 5000)
	(players-score every-enemy < 5000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 6000)
	(players-score every-enemy < 6000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 7000)
	(players-score every-enemy < 7000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 8000)
	(players-score every-enemy < 8000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 9000)
	(players-score every-enemy < 9000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 10000)
	(players-score every-enemy < 10000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 11000)
	(players-score every-enemy < 11000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 12000)
	(players-score every-enemy < 12000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 13000)
	(players-score every-enemy < 13000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 14000)
	(players-score every-enemy < 14000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 15000)
	(players-score every-enemy < 15000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 16000)
	(players-score every-enemy < 16000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 17000)
	(players-score every-enemy < 17000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 18000)
	(players-score every-enemy < 18000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 19000)
	(players-score every-enemy < 19000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 20000)
	(players-score every-enemy < 20000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 21000)
	(players-score every-enemy < 21000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 22000)
	(players-score every-enemy < 22000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 23000)
	(players-score every-enemy < 23000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 24000)
	(players-score every-enemy < 24000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 25000)
	(players-score every-enemy < 25000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 26000)
	(players-score every-enemy < 26000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 27000)
	(players-score every-enemy < 27000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 28000)
	(players-score every-enemy < 28000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 29000)
	(players-score every-enemy < 29000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 30000)
	(players-score every-enemy < 30000)
=>
	(set-goal WERE-WINNING 1)
)

(defrule
	(current-score > 31000)
	(players-score every-enemy < 31000)
=>
	(set-goal WERE-WINNING 1)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; resource gathering buildings
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal NEED-FOOD 1)
	(resource-found food)
	(dropsite-min-distance food > 5)
	(or	(building-type-count-total mill < 1)
		(current-age == imperial-age))
	(can-build mill)
=>
	(build mill)
	(chat-local-to-self "mill")
)

(defrule
	(goal NEED-WOOD 1)
	(resource-found wood)
	(building-type-count-total mill >= 1)
	(or	(building-type-count-total lumber-camp < 5)
		(current-age == imperial-age))
	(dropsite-min-distance wood > 5)
	(can-build lumber-camp)
=>
	(build lumber-camp)
	(chat-local-to-self "lumber-camp")
)

(defrule
	(goal NEED-GOLD 1)
	(resource-found gold)
	(or	(building-type-count-total mining-camp < 5)
		(current-age == imperial-age))
	(dropsite-min-distance gold > 7)
	(can-build mining-camp)
=>
	(build mining-camp)
	(chat-local-to-self "gold-mine")
)

(defrule
	(goal NEED-STONE 1)
	(resource-found stone)
	(building-type-count-total mining-camp >= 1); dont build stone-mine until after gold-mine
	(building-type-count-total mining-camp < 5)
	(dropsite-min-distance stone > 7)
	(can-build mining-camp)
=>
	(build mining-camp)
	(chat-local-to-self "stone-mine")
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; build farms
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; start farming after we have twenty villagers
(defrule
	(unit-type-count-total villager >= 20)
=>
	(set-goal BUILD-FARM 1)
	(disable-self)
)

; build a farm if food is farther than 5 tiles away
(defrule
	(dropsite-min-distance food > 5)
	(can-build farm)
=>
	(set-goal BUILD-FARM 1)
)

; after farming has started, build farms to keep food above 600, before castle
(defrule
	(current-age <= feudal-age)
	(building-type-count-total farm > 0)
	(food-amount < 600)
=>
	(set-goal BUILD-FARM 1)
)

; after farming has started, build farms to keep food above 900, before imperial
(defrule
	(current-age <= castle-age)
	(building-type-count-total farm > 0)
	(food-amount < 900)
=>
	(set-goal BUILD-FARM 1)
)

; use excess wood to farm
(defrule
	(wood-amount > 500)
	(food-amount < 500)
=>
	(set-goal BUILD-FARM 1)
)

(defrule
	(wood-amount > 750)
	(food-amount < 750)
=>
	(set-goal BUILD-FARM 1)
)

(defrule
	(wood-amount > 1000)
	(food-amount < 1000)
=>
	(set-goal BUILD-FARM 1)
)

(defrule
	(wood-amount > 1250)
	(food-amount < 1250)
=>
	(set-goal BUILD-FARM 1)
)

(defrule
	(wood-amount > 1500)
	(food-amount < 1500)
=>
	(set-goal BUILD-FARM 1)
)

; use excess wood to farm unconditionally
(defrule
	(wood-amount > 2000)
=>
	(set-goal BUILD-FARM 1)
)

(defrule
	(goal BUILD-FARM 1)
	(idle-farm-count < 2)
	(building-type-count-total farm < MAX-FARMS)
	(can-build farm)
=>
	(set-goal BUILD-FARM 0)
	(build farm)
	(chat-local-to-self "farm")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train villagers
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age == dark-age)
	(unit-type-count-total villager < DARK-AGE-VILLAGERS)
	(can-train villager)
=>
	(train villager)
	(chat-local-to-self "villager")
)

(defrule
	(current-age == feudal-age)
;	(research-completed ri-wheel-barrow)
	(unit-type-count-total villager < FEUDAL-AGE-VILLAGERS)
	(can-train villager)
=>
	(train villager)
	(chat-local-to-self "villager")
)

(defrule
	(current-age == castle-age)
	(unit-type-count-total villager < CASTLE-AGE-VILLAGERS)
	(can-train villager)
=>
	(train villager)
	(chat-local-to-self "villager")
)

(defrule
	(current-age == imperial-age)
	(unit-type-count-total villager < IMPERIAL-AGE-VILLAGERS)
	(can-train villager)
=>
	(train villager)
	(chat-local-to-self "villager")
)
;
; end villager training
;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; get a relic
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(unit-type-count-total monk < 1)
	(can-train monk)
=>
	(train monk)
	(chat-local-to-self "monk")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train pre-army defense
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 0)
	(unit-type-count-total spearman-line < DEFEND-SPEARMAN-COUNT)
	(can-train spearman-line)
=>
	(train spearman-line)
	(chat-local-to-self "spearman")
)

(defrule
	(goal BUILD-ARMY 0)
	(unit-type-count-total militiaman-line < DEFEND-MILITIA-COUNT)
	(can-train militiaman-line)
=>
	(train militiaman-line)
	(chat-local-to-self "militiaman")
)

(defrule
	(goal BUILD-ARMY 0)
	(unit-type-count-total archer-line < DEFEND-ARCHER-COUNT)
	(can-train archer-line)
=>
	(train archer-line)
	(chat-local-to-self "archer-line")
)

(defrule
	(goal BUILD-ARMY 0)
	(unit-type-count-total skirmisher-line < DEFEND-SKIRMISHER-COUNT)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
	(chat-local-to-self "skirmisher")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; determine whether to build siege weapons
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 1)
	(soldier-count > MIN-SIEGE-SOLDIERS)
=>
	(set-goal BUILD-SIEGE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; low on gold, but need military
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; kill cavalry
(defrule
	(goal BUILD-ARMY 1)
	(gold-amount < 100)
	(population < 115)
	(can-train spearman-line)
=>
	(train spearman-line)
	(chat-local-to-self "spearman")
)

; kill archers
(defrule
	(goal BUILD-ARMY 1)
	(gold-amount < 100)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
	(chat-local-to-self "skirmisher")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train archery range units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total archer-line < ARCHER-COUNT)
	(can-train archer-line)
=>
	(train archer-line)
	(chat-local-to-self "archer")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total skirmisher-line < SKIRMISHER-COUNT)
	(can-train skirmisher-line)
=>
	(train skirmisher-line)
	(chat-local-to-self "skirmisher")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total cavalry-archer-line < CAVALRY-ARCHER-COUNT)
	(can-train archer-line)
=>
	(train archer-line)
	(chat-local-to-self "archer")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total hand-cannoneer < HAND-CANNONEER-COUNT)
	(can-train hand-cannoneer)
=>
	(train hand-cannoneer)
	(chat-local-to-self "hand-cannoneer")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train barracks units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total eagle-warrior-line < EAGLE-WARRIOR-COUNT)
	(can-train eagle-warrior-line)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "eagle-warrior")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total militiaman-line < MILITIA-COUNT)
	(can-train militiaman-line)
=>
	(train militiaman-line)
	(chat-local-to-self "militiaman")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total spearman-line < SPEARMAN-COUNT)
	(can-train spearman-line)
=>
	(train spearman-line)
	(chat-local-to-self "spearman")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train castle units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total my-unique-unit-line < UNIQUE-UNIT-COUNT)
	(can-train my-unique-unit-line)
=>
	(train my-unique-unit-line)
	(chat-local-to-self "unique-unit")
)

(defrule
	(goal BUILD-SIEGE 1)
	(unit-type-count-total trebuchet < TREBUCHET-COUNT)
	(can-train trebuchet)
=>
	(train trebuchet)
	(chat-local-to-self "trebuchet")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total petard < PETARD-COUNT)
	(can-train petard)
=>
	(train petard)
	(chat-local-to-self "petard")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train dock units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(unit-type-count-total trade-cog < TRADE-COG-COUNT)
	(can-train trade-cog)
=>
	(train trade-cog)
	(chat-local-to-self "trade-cog")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total cannon-galleon-line < CANNON-GALLEON-COUNT)
	(can-train cannon-galleon-line)
=>
	(train cannon-galleon-line)
	(chat-local-to-self "cannon-galleon")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total demolition-ship-line < DEMO-SHIP-COUNT)
	(can-train demolition-ship-line)
=>
	(train demolition-ship-line)
	(chat-local-to-self "demolition-ship")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total fire-ship-line < FIRE-SHIP-COUNT)
	(can-train fire-ship-line)
=>
	(train fire-ship-line)
	(chat-local-to-self "fire-ship")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total galley-line < GALLEY-COUNT)
	(can-train galley-line)
=>
	(train galley-line)
	(chat-local-to-self "galley")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total longboat-line < LONGBOAT-COUNT)
	(can-train longboat-line)
=>
	(train longboat-line)
	(chat-local-to-self "longboat")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total turtle-ship-line < TURTLE-SHIP-COUNT)
	(can-train turtle-ship-line)
=>
	(train turtle-ship-line)
	(chat-local-to-self "turtle-ship")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train market units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age == imperial-age)
	(players-building-type-count any-ally market > 0)
	(unit-type-count-total trade-cart < TRADE-CART-COUNT)
	(can-train trade-cart)
=>
	(train trade-cart)
	(chat-local-to-self "trade-cart")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train monastery units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total monk < MONK-COUNT)
	(can-train monk)
=>
	(train monk)
	(chat-local-to-self "monk")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total missionary < MISSIONARY-COUNT)
	(can-train missionary)
=>
	(train missionary)
	(chat-local-to-self "missionary")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train siege workshop units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-SIEGE 1)
	(unit-type-count-total battering-ram-line < RAM-COUNT)
	(can-train battering-ram-line)
=>
	(train battering-ram-line)
	(chat-local-to-self "battering-ram")
)

(defrule
	(goal BUILD-SIEGE 1)
	(unit-type-count-total mangonel-line < MANGONEL-COUNT)
	(can-train mangonel-line)
=>
	(train mangonel-line)
	(chat-local-to-self "mangonel")
)

(defrule
	(goal BUILD-SIEGE 1)
	(unit-type-count-total scorpion-line < SCORPION-COUNT)
	(can-train scorpion-line)
=>
	(train scorpion-line)
	(chat-local-to-self "scorpion")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; train stable units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total camel-line < CAMEL-COUNT)
	(can-train camel-line)
=>
	(train camel-line)
	(chat-local-to-self "camel")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total knight-line < KNIGHT-COUNT)
	(can-train knight-line)
=>
	(train knight-line)
	(chat-local-to-self "knight")
)

(defrule
	(goal BUILD-ARMY 1)
	(unit-type-count-total scout-cavalry-line < SCOUT-CAVALRY-COUNT)
	(can-train scout-cavalry-line)
=>
	(train scout-cavalry-line)
	(chat-local-to-self "scout-cavalry")
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; build walls & towers
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(true)
=>
	(enable-wall-placement 2)
	(disable-self)
)

(defrule
	(not (town-under-attack))
	(current-age >= castle-age)
	(building-type-count-total gate < GATE-COUNT)
	(can-build-gate 2)
=>
	(build-gate 2)
)

(defrule
	(not (town-under-attack))
	(current-age >= feudal-age)
	(wall-completed-percentage 2 < 100)
=>
	(build-wall 2 palisade-wall)
)

;(defrule
;	(or	(wall-invisible-percentage 2 == 0)
;		(current-age >= castle-age))
;=>
;	(set-strategic-number sn-task-ungrouped-soldiers 0)
;	(chat-local-to-self "wall visible stop tasking soldiers")
;	(disable-self)
;)
	
;(defrule
;	(current-age == feudal-age)
;	(can-build outpost)
;	(building-type-count-total watch-tower-line < OUTPOSTS)
;=>
;	(build outpost)
;	(chat-local-to-self "outpost")
;)

(defrule
	(can-build watch-tower-line)
=>
	(build-forward watch-tower-line)
	(chat-local-to-self "forward tower")
	(disable-self)
)

(defrule
;	(current-age >= castle-age)
	(building-type-count-total watch-tower-line < WATCH-TOWERS)
	(can-build watch-tower-line)
=>
	(build watch-tower-line)
	(chat-local-to-self "watch-tower-line")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; build buildings
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(building-type-count-total blacksmith < 1)
	(can-build blacksmith)
=>
	(build blacksmith)
	(chat-local-to-self "blacksmith")
)

(defrule
	(building-type-count-total market < 1)
	(can-build market)
=>
	(build market)
	(chat-local-to-self "market")
)

(defrule
	(building-type-count-total university < 1)
	(can-build university)
=>
	(build university)
	(chat-local-to-self "university")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; feudal buildings
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age == feudal-age)
	(building-type-count-total barracks < FEUDAL-BARRACKS)
	(can-build barracks)
=>
	(build barracks)
	(chat-local-to-self "barracks")
)

(defrule
	(current-age >= feudal-age)
	(building-type-count-total archery-range < FEUDAL-ARCHERY-RANGES)
	(can-build archery-range)
=>
	(build archery-range)
	(chat-local-to-self "archery-range")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; castle buildings
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(building-type-count-total monastery < CASTLE-MONASTERIES)
	(can-build monastery)
=>
	(build monastery)
	(chat-local-to-self "monastery")
)

(defrule
	(building-type-count-total siege-workshop < CASTLE-SIEGE-WORKSHOPS)
	(can-build siege-workshop)
=>
	(build siege-workshop)
	(chat-local-to-self "siege workshop")
)

(defrule
	(current-age == castle-age)
	(building-type-count-total barracks < CASTLE-BARRACKS)
	(can-build barracks)
=>
	(build barracks)
	(chat-local-to-self "barracks")
)

(defrule
	(current-age >= castle-age)
	(building-type-count-total archery-range < CASTLE-ARCHERY-RANGES)
	(can-build archery-range)
=>
	(build archery-range)
	(chat-local-to-self "archery-range")
)

(defrule
	(building-type-count-total stable < CASTLE-STABLES)
	(can-build stable)
=>
	(build stable)
	(chat-local-to-self "stable")
)

(defrule
	(not (town-under-attack))
	(stone-amount > 1000)
	(can-build castle)
=>
	(build castle)
	(chat-local-to-self "castle")
)

;(defrule
;	(military-population > 50)
;	(wood-amount > CASTLE-AGE-WOOD-GOAL)
;	(current-age >= castle-age)
;	(building-type-count-total dock < 1)
;	(can-build dock)
;=>
;	(build dock)
;	(chat-local-to-self "dock")
;)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst SMALL-GROUP 5)
(defconst LARGE-GROUP 10)
(defconst COUNTER-SMALL 7)
(defconst COUNTER-LARGE 10)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/knights
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy man-at-arms >= SMALL-GROUP)
	(players-unit-type-count any-enemy man-at-arms <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy throwing-axeman >= SMALL-GROUP)
	(players-unit-type-count any-enemy throwing-axeman <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy woad-raider >= SMALL-GROUP)
	(players-unit-type-count any-enemy woad-raider <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy huskarl >= SMALL-GROUP)
	(players-unit-type-count any-enemy huskarl <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy samurai >= SMALL-GROUP)
	(players-unit-type-count any-enemy samurai <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy berserk >= SMALL-GROUP)
	(players-unit-type-count any-enemy berserk <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy scorpion >= SMALL-GROUP)
	(players-unit-type-count any-enemy scorpion <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy war-wagon >= SMALL-GROUP)
	(players-unit-type-count any-enemy war-wagon <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy mangonel >= SMALL-GROUP)
	(players-unit-type-count any-enemy mangonel <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy bombard-cannon >= SMALL-GROUP)
	(players-unit-type-count any-enemy bombard-cannon <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy battering-ram >= SMALL-GROUP)
	(players-unit-type-count any-enemy battering-ram <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy trebuchet >= SMALL-GROUP)
	(players-unit-type-count any-enemy trebuchet <= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy man-at-arms >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy throwing-axeman >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy woad-raider >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy huskarl >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy samurai >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy berserk >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy scorpion >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy war-wagon >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy mangonel >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy bombard-cannon >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy battering-ram >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

(defrule
	(current-age >= castle-age)
	(can-train knight-line)
	(unit-type-count knight-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy trebuchet >= LARGE-GROUP)
=>
	(train knight-line)
	(chat-local-to-self "counter w/knight")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/eagle warrior
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy scorpion >= SMALL-GROUP)
	(players-unit-type-count any-enemy scorpion <= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy war-wagon >= SMALL-GROUP)
	(players-unit-type-count any-enemy war-wagon <= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy mangonel >= SMALL-GROUP)
	(players-unit-type-count any-enemy mangonel <= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy bombard-cannon >= SMALL-GROUP)
	(players-unit-type-count any-enemy bombard-cannon <= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy battering-ram >= SMALL-GROUP)
	(players-unit-type-count any-enemy battering-ram <= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy trebuchet >= SMALL-GROUP)
	(players-unit-type-count any-enemy trebuchet <= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(players-unit-type-count any-enemy monk >= 2)
	(unit-type-count eagle-warrior < 5)
	(can-train eagle-warrior)
=>
	(train eagle-warrior)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy scorpion >= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy war-wagon >= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy mangonel >= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy bombard-cannon >= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy battering-ram >= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(can-train eagle-warrior-line)
	(unit-type-count eagle-warrior-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy trebuchet >= LARGE-GROUP)
=>
	(train eagle-warrior-line)
	(chat-local-to-self "counter w/eagle-warrior")
)

(defrule
	(current-age >= castle-age)
	(players-unit-type-count any-enemy monk >= 5)
	(unit-type-count eagle-warrior < 7)
	(can-train eagle-warrior)
=>
	(train eagle-warrior)
	(chat-local-to-self "counter w/eagle-warrior")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/camel
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy knight >= SMALL-GROUP)
	(players-unit-type-count any-enemy knight <= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy war-elephant >= SMALL-GROUP)
	(players-unit-type-count any-enemy war-elephant <= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy cataphract >= SMALL-GROUP)
	(players-unit-type-count any-enemy cataphract <= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy tarkan >= SMALL-GROUP)
	(players-unit-type-count any-enemy tarkan <= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy knight >= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy war-elephant >= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy cataphract >= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

(defrule
	(current-age >= castle-age)
	(can-train camel-line)
	(unit-type-count camel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy tarkan >= LARGE-GROUP)
=>
	(train camel-line)
	(chat-local-to-self "counter w/camel")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/spearman
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy knight >= SMALL-GROUP)
	(players-unit-type-count any-enemy knight <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy war-elephant >= SMALL-GROUP)
	(players-unit-type-count any-enemy war-elephant <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy cataphract >= SMALL-GROUP)
	(players-unit-type-count any-enemy cataphract <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy tarkan >= SMALL-GROUP)
	(players-unit-type-count any-enemy tarkan <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy camel >= SMALL-GROUP)
	(players-unit-type-count any-enemy camel <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy scout-cavalry >= SMALL-GROUP)
	(players-unit-type-count any-enemy scout-cavalry <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy mameluke >= SMALL-GROUP)
	(players-unit-type-count any-enemy mameluke <= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy knight >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy war-elephant >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy cataphract >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy tarkan >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy camel >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy scout-cavalry >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

(defrule
	(current-age >= castle-age)
	(not(can-train camel-line))
	(can-train spearman-line)
	(unit-type-count spearman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy mameluke >= LARGE-GROUP)
=>
	(train spearman-line)
	(chat-local-to-self "counter w/spearman")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/mangonel
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy archer >= SMALL-GROUP)
	(players-unit-type-count any-enemy archer <= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy cavalry-archer >= SMALL-GROUP)
	(players-unit-type-count any-enemy cavalry-archer <= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy longbowman >= SMALL-GROUP)
	(players-unit-type-count any-enemy longbowman <= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy chu-ko-nu >= SMALL-GROUP)
	(players-unit-type-count any-enemy chu-ko-nu <= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy plumed-archer >= SMALL-GROUP)
	(players-unit-type-count any-enemy plumed-archer <= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy mangudai >= SMALL-GROUP)
	(players-unit-type-count any-enemy mangudai <= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy archer >= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy cavalry-archer >= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy longbowman >= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy chu-ko-nu >= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy plumed-archer >= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

(defrule
	(current-age >= castle-age)
	(can-train mangonel-line)
	(unit-type-count mangonel-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy mangudai >= LARGE-GROUP)
=>
	(train mangonel-line)
	(chat-local-to-self "counter w/mangonel")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/skirmishers
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy archer >= SMALL-GROUP)
	(players-unit-type-count any-enemy archer <= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy cavalry-archer >= SMALL-GROUP)
	(players-unit-type-count any-enemy cavalry-archer <= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy longbowman >= SMALL-GROUP)
	(players-unit-type-count any-enemy longbowman <= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy chu-ko-nu >= SMALL-GROUP)
	(players-unit-type-count any-enemy chu-ko-nu <= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy plumed-archer >= SMALL-GROUP)
	(players-unit-type-count any-enemy plumed-archer <= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy mangudai >= SMALL-GROUP)
	(players-unit-type-count any-enemy mangudai <= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy archer >= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy cavalry-archer >= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy longbowman >= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy chu-ko-nu >= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy plumed-archer >= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

(defrule
	(current-age >= castle-age)
	(can-train skirmisher-line)
	(unit-type-count skirmisher-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy mangudai >= LARGE-GROUP)
=>
	(train skirmisher-line)
	(chat-local-to-self "counter w/skirmisher")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/archers
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(can-train archer-line)
	(unit-type-count archer-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy monk >= SMALL-GROUP)
	(players-unit-type-count any-enemy monk <= LARGE-GROUP)
=>
	(train archer-line)
	(chat-local-to-self "counter w/archer")
)

(defrule
	(current-age >= castle-age)
	(can-train archer-line)
	(unit-type-count archer-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy teutonic-knight >= SMALL-GROUP)
	(players-unit-type-count any-enemy teutonic-knight <= LARGE-GROUP)
=>
	(train archer-line)
	(chat-local-to-self "counter w/archer")
)

(defrule
	(current-age >= castle-age)
	(can-train archer-line)
	(unit-type-count archer-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy monk >= LARGE-GROUP)
=>
	(train archer-line)
	(chat-local-to-self "counter w/archer")
)

(defrule
	(current-age >= castle-age)
	(can-train archer-line)
	(unit-type-count archer-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy teutonic-knight >= LARGE-GROUP)
=>
	(train archer-line)
	(chat-local-to-self "counter w/archer")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/militiaman
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(can-train militiaman-line)
	(unit-type-count militiaman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy spearman >= SMALL-GROUP)
	(players-unit-type-count any-enemy spearman <= LARGE-GROUP)
=>
	(train militiaman-line)
	(chat-local-to-self "counter w/militiaman")
)

(defrule
	(current-age >= castle-age)
	(can-train militiaman-line)
	(unit-type-count militiaman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy battering-ram >= SMALL-GROUP)
	(players-unit-type-count any-enemy battering-ram <= LARGE-GROUP)
=>
	(train militiaman-line)
	(chat-local-to-self "counter w/militiaman")
)

(defrule
	(current-age >= castle-age)
	(can-train militiaman-line)
	(unit-type-count militiaman-line < COUNTER-SMALL)
	(players-unit-type-count any-enemy trebuchet >= SMALL-GROUP)
	(players-unit-type-count any-enemy trebuchet <= LARGE-GROUP)
=>
	(train militiaman-line)
	(chat-local-to-self "counter w/militiaman")
)

(defrule
	(current-age >= castle-age)
	(can-train militiaman-line)
	(unit-type-count militiaman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy spearman >= LARGE-GROUP)
=>
	(train militiaman-line)
	(chat-local-to-self "counter w/militiaman")
)

(defrule
	(current-age >= castle-age)
	(can-train militiaman-line)
	(unit-type-count militiaman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy battering-ram >= LARGE-GROUP)
=>
	(train militiaman-line)
	(chat-local-to-self "counter w/militiaman")
)

(defrule
	(current-age >= castle-age)
	(can-train militiaman-line)
	(unit-type-count militiaman-line < COUNTER-LARGE)
	(players-unit-type-count any-enemy trebuchet >= LARGE-GROUP)
=>
	(train militiaman-line)
	(chat-local-to-self "counter w/militiaman")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; counter w/scout cavalry
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age >= castle-age)
	(players-unit-type-count any-enemy monk >= 2)
	(unit-type-count scout-cavalry < 5)
	(can-train scout-cavalry)
=>
	(train scout-cavalry)
)

(defrule
	(current-age >= castle-age)
	(players-unit-type-count any-enemy monk >= 5)
	(unit-type-count scout-cavalry < 7)
	(can-train scout-cavalry)
=>
	(train scout-cavalry)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; rush strategy
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst SUBSIDIZE-RUSH-TIME 3600)

(defrule
	(game-time < SUBSIDIZE-RUSH-TIME)
	(can-train DEFENDER)
=>
	(train DEFENDER)
	(chat-local-to-self "defender")
)

(defrule
	(game-time < SUBSIDIZE-RUSH-TIME)
	(can-train scorpion-line)
=>
	(train scorpion-line)
	(chat-local-to-self "scorpion defender")
)

;(defrule
;	(game-time < SUBSIDIZE-RUSH-TIME)
;	(goal RUSH-COUNT 0)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 1)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 1)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 2)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 2)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 3)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 3)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 4)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 4)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 5)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 5)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 6)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 6)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 7)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(game-time < SUBSIDIZE-RUSH-TIME)
;	(goal RUSH-COUNT 7)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 8)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 8)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 9)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(game-time < SUBSIDIZE-RUSH-TIME)
;	(goal RUSH-COUNT 9)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 10)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 10)
;	(can-train archer-line)
;	(can-train spearman-line)
;=>
;	(set-goal RUSH-COUNT 11)
;	(train archer-line)
;	(train spearman-line)
;	(chat-local-to-self "archer, spearman")
;)
;
;(defrule
;	(goal RUSH-COUNT 11)
;	(research-completed ri-padded-archer-armor)
;	(research-completed ri-fletching)
;	(unit-type-count-total battering-ram-line >= 2)
;=>
;	(set-goal RUSH-COUNT 0)
;	(chat-local-to-self "rush")
;	(set-strategic-number sn-percent-attack-soldiers 100)
;	(set-strategic-number sn-task-ungrouped-soldiers 1)
;	(attack-now)
;)
;
;(defrule
;	(goal RUSH-COUNT 11)
;	(unit-type-count-total battering-ram-line < 2)
;=>
;	(set-goal RUSH-COUNT 10)
;	(chat-local-to-self "waiting for battering-rams")
;)
;
;(defrule
;	(goal RUSH-COUNT 11)
;	(or (not (research-completed ri-padded-archer-armor))
;	(or	(not (research-completed ri-fletching))
;		(not (research-completed ri-forging))))
;=>
;	(set-goal RUSH-COUNT 10)
;	(chat-local-to-self "waiting for rush research")
;)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; rush research
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-padded-archer-armor)
;=>
;	(release-escrow food)
;	(research ri-padded-archer-armor)
;	(chat-local-to-self "1 researching padded-archer-armor")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-scale-mail)
;=>
;	(release-escrow food)
;	(research ri-scale-mail)
;	(chat-local-to-self "1 researching scale-mail")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-fletching)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-fletching)
	(chat-local-to-self "1 researching fletching")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-forging)
;=>
;	(release-escrow food)
;	(research ri-forging)
;	(chat-local-to-self "1 researching forging")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-crossbow)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-crossbow)
;	(chat-local-to-self "1 researching crossbow")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-pikeman)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-pikeman)
;	(chat-local-to-self "1 researching pikeman")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-leather-archer-armor)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-leather-archer-armor)
;	(chat-local-to-self "1 researching leather-archer-armor")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-chain-mail)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-chain-mail)
;	(chat-local-to-self "1 researching chain-mail")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-ring-archer-armor)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-ring-archer-armor)
;	(chat-local-to-self "1 researching ring-archer-armor")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-plate-mail)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-plate-mail)
;	(chat-local-to-self "1 researching plate-mail")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-thumb-ring)
;=>
;	(release-escrow food)
;	(release-escrow wood)
;	(research ri-thumb-ring)
;	(chat-local-to-self "1 researching thumb-ring")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-arbalest)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-arbalest)
;	(chat-local-to-self "1 researching arbalest")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-halberdier)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-halberdier)
;	(chat-local-to-self "1 researching halberdier")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-bodkin-arrow)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bodkin-arrow)
	(chat-local-to-self "1 researching bodkin-arrow")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-iron-casting)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-iron-casting)
;	(chat-local-to-self "1 researching iron-casting")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-ballistics)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research ri-ballistics)
	(chat-local-to-self "1 researching ballistics")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-bracer)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-bracer)
	(chat-local-to-self "1 researching bracer")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal DO-RUSH-RESEARCH 1)
;	(can-research-with-escrow ri-blast-furnace)
;=>
;	(release-escrow food)
;	(release-escrow gold)
;	(research ri-blast-furnace)
;	(chat-local-to-self "1 researching blast-furnace")
;	(disable-self)
;)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-chemistry)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-chemistry)
	(chat-local-to-self "1 researching chemistry")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-murder-holes)
=>
	(release-escrow food)
	(release-escrow stone)
	(research ri-murder-holes)
	(chat-local-to-self "1 researching murder-holes")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow ri-conscription)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-conscription)
	(chat-local-to-self "1 researching conscription")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research ri-cartography)
=>
	(release-escrow food)
	(release-escrow gold)
	(research ri-cartography)
	(chat-local-to-self "1 researching cartography")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; unique research
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#load-if-defined AZTEC-CIV
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow food)
	(release-escrow gold)
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(goal DO-CAVALRY-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow food)
	(release-escrow gold)
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(goal DO-ARCHER-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(goal DO-INFANTRY-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined GOTHIC-CIV
#end-if
#load-if-defined HUN-CIV
#end-if
#load-if-defined JAPANESE-CIV
#end-if
#load-if-defined KOREAN-CIV
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(goal DO-INFANTRY-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(goal DO-RUSH-RESEARCH 1)
	(can-research-with-escrow my-unique-research)
=>
	(release-escrow wood)
	(release-escrow gold)
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(goal DO-CAVALRY-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(goal DO-CAVALRY-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined SPANISH-CIV
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
#load-if-defined TURKISH-CIV
#end-if
#load-if-defined VIKING-CIV 
(defrule
	(goal DO-INFANTRY-RESEARCH 1)
	(can-research my-unique-research)
=>
	(research my-unique-research)
	(chat-local-to-self "1 researching my-unique-research")
	(disable-self)
)
#end-if
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
	(can-research my-unique-unit-upgrade)
=>
	(research my-unique-unit-upgrade)
	(chat-local-to-self "1 researching my-unique-unit-upgrade")
	(disable-self)
)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; allow only economic techs to start
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(true)
=>
	(set-goal NEXT-ECONOMIC-TECH 0)
	(set-goal NEXT-MISSILE-TECH 0)
	(set-goal NEXT-ARCHER-TECH 0)
	(set-goal NEXT-INFANTRY-TECH 0)
	(set-goal NEXT-CAVALRY-TECH 0)
	(set-goal NEXT-SIEGE-TECH 0)
	(set-goal NEXT-TOWER-TECH 0)
	(set-goal NEXT-BUILDING-TECH 0)
	(set-goal NEXT-MONK-TECH 0)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; research rush techs
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
;	(building-type-count-total archery-range >= 1)
	(true)
=>
	(set-goal DO-RUSH-RESEARCH 1)
)

(defrule
	(goal DO-ARCHER-RESEARCH 1)
=>
	(set-goal NEXT-ARCHER-TECH RI-PADDED-ARCHER-ARMOR)
)

(defrule
	(goal DO-INFANTRY-RESEARCH 1)
=>
	(set-goal NEXT-INFANTRY-TECH RI-TRACKING)
)

(defrule
	(goal DO-CAVALRY-RESEARCH 1)
=>
	(set-goal NEXT-CAVALRY-TECH RI-SCALE-BARDING)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; start other research techs
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
;	(game-time > SUBSIDIZE-RUSH-TIME)
;	(goal BUILD-SIEGE 1)
	(current-age >= imperial-age)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-DOUBLE-BIT-AXE)
	(set-goal NEXT-MISSILE-TECH RI-FLETCHING)
	(set-goal NEXT-ARCHER-TECH RI-PADDED-ARCHER-ARMOR)
	(set-goal NEXT-INFANTRY-TECH RI-TRACKING)
	(set-goal NEXT-CAVALRY-TECH RI-SCALE-BARDING)
	(set-goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
	(set-goal NEXT-TOWER-TECH RI-GUARD-TOWER)
	(set-goal NEXT-BUILDING-TECH RI-TOWN-WATCH)
	(set-goal NEXT-MONK-TECH RI-ILLUMINATION)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; start building a diverse army
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(or
		(game-time > SUBSIDIZE-RUSH-TIME)
		(current-age >= imperial-age)
	)
=>
	(set-goal BUILD-ARMY 1)
	(chat-local-to-self "ready to create military")
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; determine which research to do for unique units
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#load-if-defined AZTEC-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined BRITON-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined BYZANTINE-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-cavalry-research")
	(set-goal DO-CAVALRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined CELTIC-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined CHINESE-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined FRANKISH-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined GOTHIC-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined HUN-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-cavalry-research")
	(set-goal DO-CAVALRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined JAPANESE-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined KOREAN-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-cavalry-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(set-goal DO-CAVALRY-RESEARCH 1)
	(set-goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined MAYAN-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined MONGOL-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-cavalry-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(set-goal DO-CAVALRY-RESEARCH 1)
	(set-goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined PERSIAN-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-cavalry-research")
	(set-goal DO-CAVALRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined SARACEN-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-cavalry-research")
	(set-goal DO-CAVALRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined SPANISH-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined TEUTONIC-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined TURKISH-CIV
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(disable-self)
)
#end-if
#load-if-defined VIKING-CIV 
(defrule
	(unit-type-count-total my-unique-unit-line > UNIQUE-UNIT-RESEARCH)
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)
#end-if

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; determine which group research to do
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(or	(unit-type-count-total eagle-warrior-line >= EAGLE-WARRIOR-RESEARCH)
	(or	(unit-type-count-total spearman-line >= SPEARMAN-RESEARCH)
		(unit-type-count-total militiaman-line >= MILITIA-RESEARCH)))
=>
	(chat-local-to-self "do-infantry-research")
	(set-goal DO-INFANTRY-RESEARCH 1)
	(disable-self)
)

(defrule
	(or	(unit-type-count-total scout-cavalry-line >= SCOUT-CAVALRY-RESEARCH)
	(or	(unit-type-count-total knight-line >= KNIGHT-RESEARCH)
		(unit-type-count-total camel-line >= CAMEL-RESEARCH)))
=>
	(chat-local-to-self "do-cavalry-research")
	(set-goal DO-CAVALRY-RESEARCH 1)
	(disable-self)
)

(defrule
	(or	(unit-type-count-total skirmisher-line >= SKIRMISHER-RESEARCH)
		(unit-type-count-total archer-line >= ARCHER-RESEARCH))
=>
	(chat-local-to-self "do-archer-research")
	(set-goal DO-ARCHER-RESEARCH 1)
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; research tracks
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule 
	(can-research ri-loom)
=>
	(research ri-loom)
	(chat-local-to-self "1 researching loom")
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ECONOMIC-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-DOUBLE-BIT-AXE)
	(research-completed ri-double-bit-axe)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-HORSE-COLLAR)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-DOUBLE-BIT-AXE)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-double-bit-axe)
=>
	(research ri-double-bit-axe)
	(chat-local-to-self "1 researching double-bit-axe")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-DOUBLE-BIT-AXE)
	(research-available ri-double-bit-axe)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-DOUBLE-BIT-AXE)
	(research-available ri-double-bit-axe)
	(wood-amount < 50)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HORSE-COLLAR)
	(research-completed ri-horse-collar)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-GOLD-MINING)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-HORSE-COLLAR)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-horse-collar)
=>
	(research ri-horse-collar)
	(chat-local-to-self "1 researching horse-collar")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HORSE-COLLAR)
	(research-available ri-horse-collar)
	(food-amount < 75)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HORSE-COLLAR)
	(research-available ri-horse-collar)
	(wood-amount < 75)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-MINING)
	(research-completed ri-gold-mining)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-STONE-MINING)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-GOLD-MINING)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-gold-mining)
=>
	(research ri-gold-mining)
	(chat-local-to-self "1 researching gold-mining")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-MINING)
	(research-available ri-gold-mining)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-MINING)
	(research-available ri-gold-mining)
	(wood-amount < 75)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-MINING)
	(research-completed ri-stone-mining)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-STONE-MINING)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-stone-mining)
=>
	(research ri-stone-mining)
	(chat-local-to-self "1 researching stone-mining")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-MINING)
	(research-available ri-stone-mining)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-MINING)
	(research-available ri-stone-mining)
	(wood-amount < 75)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
	(players-building-type-count every-ally market < 1)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-COINAGE)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
	(research-completed ri-cartography)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-COINAGE)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-cartography)
=>
	(research ri-cartography)
	(chat-local-to-self "1 researching cartography")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
	(research-available ri-cartography)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
	(research-available ri-cartography)
	(gold-amount < 100)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-COINAGE)
	(players-building-type-count every-ally market < 1)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-COINAGE)
	(research-completed ri-coinage)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-COINAGE)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-coinage)
=>
	(research ri-coinage)
	(chat-local-to-self "1 researching coinage")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-COINAGE)
	(research-available ri-coinage)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-COINAGE)
	(research-available ri-coinage)
	(gold-amount < 50)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
	(research-completed ri-wheel-barrow)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-BOW-SAW)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-wheel-barrow)
=>
	(research ri-wheel-barrow)
	(chat-local-to-self "1 researching wheel-barrow")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
	(research-available ri-wheel-barrow)
	(food-amount < 175)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
	(research-available ri-wheel-barrow)
	(wood-amount < 50)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BOW-SAW)
	(research-completed ri-bow-saw)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-HEAVY-PLOW)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-BOW-SAW)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-bow-saw)
=>
	(research ri-bow-saw)
	(chat-local-to-self "1 researching bow-saw")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BOW-SAW)
	(research-available ri-bow-saw)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BOW-SAW)
	(research-available ri-bow-saw)
	(wood-amount < 100)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HEAVY-PLOW)
	(research-completed ri-heavy-plow)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-BANKING)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-HEAVY-PLOW)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-heavy-plow)
=>
	(research ri-heavy-plow)
	(chat-local-to-self "1 researching heavy-plow")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HEAVY-PLOW)
	(research-available ri-heavy-plow)
	(food-amount < 125)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HEAVY-PLOW)
	(research-available ri-heavy-plow)
	(wood-amount < 125)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BANKING)
	(players-building-type-count every-ally market < 1)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BANKING)
	(research-completed ri-banking)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-BANKING)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-banking)
=>
	(research ri-banking)
	(chat-local-to-self "1 researching banking")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BANKING)
	(research-available ri-banking)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-BANKING)
	(research-available ri-banking)
	(gold-amount < 100)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
	(research-completed ri-conscription)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-conscription)
=>
	(research ri-conscription)
	(chat-local-to-self "1 researching conscription")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
	(research-available ri-conscription)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
	(research-available ri-conscription)
	(gold-amount < 150)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
	(current-age >= castle-age)
	(not (research-available ri-gold-shaft-mining))
=>
	(set-goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
	(research-completed ri-gold-shaft-mining)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-gold-shaft-mining)
=>
	(research ri-gold-shaft-mining)
	(chat-local-to-self "1 researching gold-shaft-mining")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
	(research-available ri-gold-shaft-mining)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
	(research-available ri-gold-shaft-mining)
	(wood-amount < 150)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
	(current-age >= castle-age)
	(not (research-available ri-stone-shaft-mining))
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CARAVAN)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
	(research-completed ri-stone-shaft-mining)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CARAVAN)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-stone-shaft-mining)
=>
	(research ri-stone-shaft-mining)
	(chat-local-to-self "1 researching stone-shaft-mining")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
	(research-available ri-stone-shaft-mining)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
	(research-available ri-stone-shaft-mining)
	(wood-amount < 150)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(unit-type-count-total trade-cart < TRADE-CART-RESEARCH)
	(goal NEXT-ECONOMIC-TECH RI-CARAVAN)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARAVAN)
	(research-completed ri-caravan)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
)
(defrule
	(unit-type-count-total trade-cart >= TRADE-CART-RESEARCH)
	(or (goal NEXT-ECONOMIC-TECH RI-CARAVAN)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-caravan)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
	(research ri-caravan)
	(chat-local-to-self "1 researching caravan")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARAVAN)
	(research-available ri-caravan)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CARAVAN)
	(research-available ri-caravan)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
	(current-age >= imperial-age)
	(not (research-available ri-crop-rotation))
=>
	(set-goal NEXT-ECONOMIC-TECH RI-GUILDS)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
	(research-completed ri-crop-rotation)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-GUILDS)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-crop-rotation)
=>
	(research ri-crop-rotation)
	(chat-local-to-self "1 researching crop-rotation")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
	(research-available ri-crop-rotation)
	(food-amount < 250)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
	(research-available ri-crop-rotation)
	(wood-amount < 250)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GUILDS)
	(current-age >= imperial-age)
	(not (research-available ri-guilds))
=>
	(set-goal NEXT-ECONOMIC-TECH RI-HAND-CART)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GUILDS)
	(research-completed ri-guilds)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-HAND-CART)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-GUILDS)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-guilds)
=>
	(research ri-guilds)
	(chat-local-to-self "1 researching guilds")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GUILDS)
	(research-available ri-guilds)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-GUILDS)
	(research-available ri-guilds)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HAND-CART)
	(research-completed ri-hand-cart)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-HAND-CART)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-hand-cart)
=>
	(research ri-hand-cart)
	(chat-local-to-self "1 researching hand-cart")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HAND-CART)
	(research-available ri-hand-cart)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-HAND-CART)
	(research-available ri-hand-cart)
	(wood-amount < 200)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
	(current-age >= imperial-age)
	(not (research-available ri-two-man-saw))
=>
	(set-goal NEXT-ECONOMIC-TECH RI-SAPPERS)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
	(research-completed ri-two-man-saw)
=>
	(set-goal NEXT-ECONOMIC-TECH RI-SAPPERS)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-two-man-saw)
=>
	(research ri-two-man-saw)
	(chat-local-to-self "1 researching two-man-saw")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
	(research-available ri-two-man-saw)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
	(research-available ri-two-man-saw)
	(wood-amount < 200)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ECONOMIC-TECH RI-SAPPERS)
	(current-age >= imperial-age)
	(not (research-available ri-sappers))
=>
	(set-goal NEXT-ECONOMIC-TECH DONE)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-SAPPERS)
	(research-completed ri-sappers)
=>
	(set-goal NEXT-ECONOMIC-TECH DONE)
)
(defrule
	(or (goal NEXT-ECONOMIC-TECH RI-SAPPERS)
		(goal NEXT-ECONOMIC-TECH DONE))
	(can-research ri-sappers)
=>
	(research ri-sappers)
	(chat-local-to-self "1 researching sappers")
	(disable-self)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-SAPPERS)
	(research-available ri-sappers)
	(food-amount < 400)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ECONOMIC-TECH RI-SAPPERS)
	(research-available ri-sappers)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; MISSILE-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MISSILE-TECH RI-FLETCHING)
	(research-completed ri-fletching)
=>
	(set-goal NEXT-MISSILE-TECH RI-BODKIN-ARROW)
)
(defrule
	(or (goal NEXT-MISSILE-TECH RI-FLETCHING)
		(goal NEXT-MISSILE-TECH DONE))
	(can-research ri-fletching)
=>
	(research ri-fletching)
	(chat-local-to-self "1 researching fletching")
	(disable-self)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-FLETCHING)
	(research-available ri-fletching)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-FLETCHING)
	(research-available ri-fletching)
	(gold-amount < 50)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MISSILE-TECH RI-BODKIN-ARROW)
	(research-completed ri-bodkin-arrow)
=>
	(set-goal NEXT-MISSILE-TECH RI-MURDER-HOLES)
)
(defrule
	(or (goal NEXT-MISSILE-TECH RI-BODKIN-ARROW)
		(goal NEXT-MISSILE-TECH DONE))
	(can-research ri-bodkin-arrow)
=>
	(research ri-bodkin-arrow)
	(chat-local-to-self "1 researching bodkin-arrow")
	(disable-self)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BODKIN-ARROW)
	(research-available ri-bodkin-arrow)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BODKIN-ARROW)
	(research-available ri-bodkin-arrow)
	(gold-amount < 100)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MISSILE-TECH RI-MURDER-HOLES)
	(research-completed ri-murder-holes)
=>
	(set-goal NEXT-MISSILE-TECH RI-BALLISTICS)
)
(defrule
	(or (goal NEXT-MISSILE-TECH RI-MURDER-HOLES)
		(goal NEXT-MISSILE-TECH DONE))
	(can-research ri-murder-holes)
=>
	(research ri-murder-holes)
	(chat-local-to-self "1 researching murder-holes")
	(disable-self)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-MURDER-HOLES)
	(research-available ri-murder-holes)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-MURDER-HOLES)
	(research-available ri-murder-holes)
	(stone-amount < 200)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MISSILE-TECH RI-BALLISTICS)
	(research-completed ri-ballistics)
=>
	(set-goal NEXT-MISSILE-TECH RI-BRACER)
)
(defrule
	(or (goal NEXT-MISSILE-TECH RI-BALLISTICS)
		(goal NEXT-MISSILE-TECH DONE))
	(can-research ri-ballistics)
=>
	(research ri-ballistics)
	(chat-local-to-self "1 researching ballistics")
	(disable-self)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BALLISTICS)
	(research-available ri-ballistics)
	(wood-amount < 300)
=>
	(set-goal NEED-WOOD 1)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BALLISTICS)
	(research-available ri-ballistics)
	(gold-amount < 175)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MISSILE-TECH RI-BRACER)
	(current-age >= imperial-age)
	(not (research-available ri-bracer))
=>
	(set-goal NEXT-MISSILE-TECH RI-CHEMISTRY)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BRACER)
	(research-completed ri-bracer)
=>
	(set-goal NEXT-MISSILE-TECH RI-CHEMISTRY)
)
(defrule
	(or (goal NEXT-MISSILE-TECH RI-BRACER)
		(goal NEXT-MISSILE-TECH DONE))
	(can-research ri-bracer)
=>
	(research ri-bracer)
	(chat-local-to-self "1 researching bracer")
	(disable-self)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BRACER)
	(research-available ri-bracer)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-BRACER)
	(research-available ri-bracer)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MISSILE-TECH RI-CHEMISTRY)
	(current-age >= imperial-age)
	(not (research-available ri-chemistry))
=>
	(set-goal NEXT-MISSILE-TECH DONE)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-CHEMISTRY)
	(research-completed ri-chemistry)
=>
	(set-goal NEXT-MISSILE-TECH DONE)
)
(defrule
	(or (goal NEXT-MISSILE-TECH RI-CHEMISTRY)
		(goal NEXT-MISSILE-TECH DONE))
	(can-research ri-chemistry)
=>
	(research ri-chemistry)
	(chat-local-to-self "1 researching chemistry")
	(disable-self)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-CHEMISTRY)
	(research-available ri-chemistry)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MISSILE-TECH RI-CHEMISTRY)
	(research-available ri-chemistry)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ARCHER-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ARCHER-TECH RI-PADDED-ARCHER-ARMOR)
	(research-completed ri-padded-archer-armor)
=>
	(set-goal NEXT-ARCHER-TECH RI-CROSSBOW)
)
(defrule
	(goal DO-ARCHER-RESEARCH 1)
	(or (goal NEXT-ARCHER-TECH RI-PADDED-ARCHER-ARMOR)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-padded-archer-armor)
=>
	(research ri-padded-archer-armor)
	(chat-local-to-self "1 researching padded-archer-armor")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-PADDED-ARCHER-ARMOR)
	(research-available ri-padded-archer-armor)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-ARCHER-TECH RI-CROSSBOW)
	(current-age >= feudal-age)
	(not (research-available ri-crossbow))
=>
	(set-goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
)
; not enough units, skip upgrade
(defrule
	(unit-type-count-total archer-line < ARCHER-RESEARCH)
	(goal NEXT-ARCHER-TECH RI-CROSSBOW)
=>
	(set-goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-CROSSBOW)
	(research-completed ri-crossbow)
=>
	(set-goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
)
(defrule
	(unit-type-count-total archer-line >= ARCHER-RESEARCH)
	(or (goal NEXT-ARCHER-TECH RI-CROSSBOW)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-crossbow)
=>
	(research ri-crossbow)
	(chat-local-to-self "1 researching crossbow")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-CROSSBOW)
	(research-available ri-crossbow)
	(food-amount < 125)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-CROSSBOW)
	(research-available ri-crossbow)
	(gold-amount < 75)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
	(research-completed ri-leather-archer-armor)
=>
	(set-goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
)
(defrule
	(or (goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-leather-archer-armor)
=>
	(research ri-leather-archer-armor)
	(chat-local-to-self "1 researching leather-archer-armor")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
	(research-available ri-leather-archer-armor)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
	(research-available ri-leather-archer-armor)
	(gold-amount < 150)
=>
	(set-goal NEED-GOLD 1)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
	(current-age >= castle-age)
	(not (research-available ri-elite-skirmisher))
=>
	(set-goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
)
; not enough units, skip upgrade
(defrule
	(unit-type-count-total skirmisher-line < SKIRMISHER-RESEARCH)
	(goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
=>
	(set-goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
	(research-completed ri-elite-skirmisher)
=>
	(set-goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
)
(defrule
	(unit-type-count-total skirmisher-line >= SKIRMISHER-RESEARCH)
	(or (goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-elite-skirmisher)
=>
	(research ri-elite-skirmisher)
	(chat-local-to-self "1 researching elite-skirmisher")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
	(research-available ri-elite-skirmisher)
	(wood-amount < 250)
=>
	(set-goal NEED-WOOD 1)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
	(research-available ri-elite-skirmisher)
	(gold-amount < 160)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
	(current-age >= imperial-age)
	(not (research-available ri-ring-archer-armor))
=>
	(set-goal NEXT-ARCHER-TECH RI-THUMB-RING)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
	(research-completed ri-ring-archer-armor)
=>
	(set-goal NEXT-ARCHER-TECH RI-THUMB-RING)
)
(defrule
	(or (goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-ring-archer-armor)
=>
	(research ri-ring-archer-armor)
	(chat-local-to-self "1 researching ring-archer-armor")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
	(research-available ri-ring-archer-armor)
	(food-amount < 250)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
	(research-available ri-ring-archer-armor)
	(gold-amount < 250)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-ARCHER-TECH RI-THUMB-RING)
	(current-age >= imperial-age)
	(not (research-available ri-thumb-ring))
=>
	(set-goal NEXT-ARCHER-TECH RI-ARBALEST)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-THUMB-RING)
	(research-completed ri-thumb-ring)
=>
	(set-goal NEXT-ARCHER-TECH RI-ARBALEST)
)
(defrule
	(or (goal NEXT-ARCHER-TECH RI-THUMB-RING)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-thumb-ring)
=>
	(research ri-thumb-ring)
	(chat-local-to-self "1 researching thumb-ring")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-THUMB-RING)
	(research-available ri-thumb-ring)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-THUMB-RING)
	(research-available ri-thumb-ring)
	(wood-amount < 250)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-ARCHER-TECH RI-ARBALEST)
	(current-age >= imperial-age)
	(not (research-available ri-arbalest))
=>
	(set-goal NEXT-ARCHER-TECH DONE)
)
(defrule
	(unit-type-count-total archer-line < ARCHER-RESEARCH)
	(goal NEXT-ARCHER-TECH RI-ARBALEST)
	(can-research ri-arbalest)
=>
	(set-goal NEXT-ARCHER-TECH DONE)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-ARBALEST)
	(research-completed ri-arbalest)
=>
	(set-goal NEXT-ARCHER-TECH DONE)
)
(defrule
	(unit-type-count-total archer-line >= ARCHER-RESEARCH)
	(or (goal NEXT-ARCHER-TECH RI-ARBALEST)
		(goal NEXT-ARCHER-TECH DONE))
	(can-research ri-arbalest)
=>
	(research ri-arbalest)
	(chat-local-to-self "1 researching arbalest")
	(disable-self)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-ARBALEST)
	(research-available ri-arbalest)
	(food-amount < 350)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-ARCHER-TECH RI-ARBALEST)
	(research-available ri-arbalest)
	(gold-amount < 300)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CAVALRY-ARCHER-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(or (can-research ri-parthian-tactics)
		(research-completed ri-parthian-tactics))
=>
	(research ri-parthian-tactics)
	(chat-local-to-self "1 researching parthian-tactics")
	(disable-self)
)
(defrule
	(goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(not (research-completed ri-parthian-tactics))
	(research-available ri-parthian-tactics)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(not (research-completed ri-parthian-tactics))
	(research-available ri-parthian-tactics)
	(gold-amount < 250)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(unit-type-count-total cavalry-archer-line < CAVALRY-ARCHER-RESEARCH)
	(or (can-research ri-heavy-cavalry-archer)
		(research-completed ri-heavy-cavalry-archer))
=>
	(research ri-heavy-cavalry-archer)
	(chat-local-to-self "1 researching heavy-cavalry-archer")
	(disable-self)
)
(defrule
	(goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(not (research-completed ri-heavy-cavalry-archer))
	(research-available ri-heavy-cavalry-archer)
	(food-amount < 900)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal DO-CAVALRY-ARCHER-RESEARCH 1)
	(not (research-completed ri-heavy-cavalry-archer))
	(research-available ri-heavy-cavalry-archer)
	(gold-amount < 500)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; INFANTRY-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-INFANTRY-TECH RI-TRACKING)
	(research-completed ri-tracking)
=>
	(set-goal NEXT-INFANTRY-TECH RI-SCALE-MAIL)
)
(defrule
	(goal DO-INFANTRY-RESEARCH 1)
	(or (goal NEXT-INFANTRY-TECH RI-TRACKING)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-tracking)
=>
	(research ri-tracking)
	(chat-local-to-self "1 researching tracking")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-TRACKING)
	(research-available ri-tracking)
	(food-amount < 75)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-INFANTRY-TECH RI-SCALE-MAIL)
	(research-completed ri-scale-mail)
=>
	(set-goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-SCALE-MAIL)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-scale-mail)
=>
	(research ri-scale-mail)
	(chat-local-to-self "1 researching scale-mail")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-SCALE-MAIL)
	(research-available ri-scale-mail)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; not enough units, skip upgrade
(defrule
	(unit-type-count-total militiaman-line < MILITIA-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
	(can-research ri-man-at-arms)
=>
	(set-goal NEXT-INFANTRY-TECH RI-FORGING)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
	(research-completed ri-man-at-arms)
=>
	(set-goal NEXT-INFANTRY-TECH RI-FORGING)
)
(defrule
	(unit-type-count-total militiaman-line >= MILITIA-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-man-at-arms)
=>
	(research ri-man-at-arms)
	(chat-local-to-self "1 researching man-at-arms")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
	(research-available ri-man-at-arms)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
	(research-available ri-man-at-arms)
	(gold-amount < 40)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-INFANTRY-TECH RI-FORGING)
	(research-completed ri-forging)
=>
	(set-goal NEXT-INFANTRY-TECH RI-SQUIRES)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-FORGING)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-forging)
=>
	(research ri-forging)
	(chat-local-to-self "1 researching forging")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-FORGING)
	(research-available ri-forging)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-INFANTRY-TECH RI-SQUIRES)
	(current-age >= castle-age)
	(not (research-available ri-squires))
=>
	(set-goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-SQUIRES)
	(research-completed ri-squires)
=>
	(set-goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-SQUIRES)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-squires)
=>
	(research ri-squires)
	(chat-local-to-self "1 researching squires")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-SQUIRES)
	(research-available ri-squires)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; not enough units, skip upgrade
(defrule
	(unit-type-count-total militiaman-line < MILITIA-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
=>
	(set-goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
	(research-completed ri-long-swordsman)
=>
	(set-goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
)
(defrule
	(unit-type-count-total militiaman-line >= MILITIA-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-long-swordsman)
=>
	(research ri-long-swordsman)
	(chat-local-to-self "1 researching long-swordsman")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
	(research-available ri-long-swordsman)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
	(research-available ri-long-swordsman)
	(gold-amount < 65)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
	(research-completed ri-chain-mail)
=>
	(set-goal NEXT-INFANTRY-TECH RI-PIKEMAN)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-chain-mail)
=>
	(research ri-chain-mail)
	(chat-local-to-self "1 researching chain-mail")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
	(research-available ri-chain-mail)
	(food-amount < 200)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
	(research-available ri-chain-mail)
	(gold-amount < 100)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-INFANTRY-TECH RI-PIKEMAN)
	(current-age >= castle-age)
	(not (research-available ri-pikeman))
=>
	(set-goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
)
; not enough units, skip it
(defrule
	(unit-type-count-total spearman-line < SPEARMAN-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-PIKEMAN)
=>
	(set-goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-PIKEMAN)
	(research-completed ri-pikeman)
=>
	(set-goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
)
(defrule
	(unit-type-count-total spearman-line >= SPEARMAN-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-PIKEMAN)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-pikeman)
=>
	(research ri-pikeman)
	(chat-local-to-self "1 researching pikeman")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-PIKEMAN)
	(research-available ri-pikeman)
	(food-amount < 215)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-PIKEMAN)
	(research-available ri-pikeman)
	(gold-amount < 90)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
	(research-completed ri-iron-casting)
=>
	(set-goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-iron-casting)
=>
	(research ri-iron-casting)
	(chat-local-to-self "1 researching iron-casting")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
	(research-available ri-iron-casting)
	(food-amount < 220)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
	(research-available ri-iron-casting)
	(gold-amount < 120)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip upgrade
(defrule
	(goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
	(current-age >= imperial-age)
	(not (research-available ri-two-handed-swordsman))
=>
	(set-goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
)
; not enough units, skip upgrade
(defrule
	(unit-type-count-total militiaman-line < MILITIA-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
=>
	(set-goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
	(research-completed ri-two-handed-swordsman)
=>
	(set-goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
)
(defrule
	(unit-type-count-total militiaman-line >= MILITIA-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-two-handed-swordsman)
=>
	(research ri-two-handed-swordsman)
	(chat-local-to-self "1 researching two-handed-swordsman")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
	(research-available ri-two-handed-swordsman)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
	(research-available ri-two-handed-swordsman)
	(gold-amount < 100)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
	(current-age >= imperial-age)
	(not (research-available ri-plate-mail))
=>
	(set-goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
	(research-completed ri-plate-mail)
=>
	(set-goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-plate-mail)
=>
	(research ri-plate-mail)
	(chat-local-to-self "1 researching plate-mail")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
	(research-available ri-plate-mail)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
	(research-available ri-plate-mail)
	(gold-amount < 150)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
	(current-age >= imperial-age)
	(not (research-available ri-blast-furnace))
=>
	(set-goal NEXT-INFANTRY-TECH RI-HALBERDIER)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
	(research-completed ri-blast-furnace)
=>
	(set-goal NEXT-INFANTRY-TECH RI-HALBERDIER)
)
(defrule
	(or (goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-blast-furnace)
=>
	(research ri-blast-furnace)
	(chat-local-to-self "1 researching blast-furnace")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
	(research-available ri-blast-furnace)
	(food-amount < 275)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
	(research-available ri-blast-furnace)
	(gold-amount < 225)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-INFANTRY-TECH RI-HALBERDIER)
	(current-age >= imperial-age)
	(not (research-available ri-halberdier))
=>
	(set-goal NEXT-INFANTRY-TECH RI-CHAMPION)
)
; not enough units, skip it
(defrule
	(unit-type-count-total spearman-line < SPEARMAN-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-HALBERDIER)
=>
	(set-goal NEXT-INFANTRY-TECH RI-CHAMPION)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-HALBERDIER)
	(research-completed ri-halberdier)
=>
	(set-goal NEXT-INFANTRY-TECH RI-CHAMPION)
)
(defrule
	(unit-type-count-total spearman-line >= SPEARMAN-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-HALBERDIER)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-halberdier)
=>
	(research ri-halberdier)
	(chat-local-to-self "1 researching halberdier")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-HALBERDIER)
	(research-available ri-halberdier)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-HALBERDIER)
	(research-available ri-halberdier)
	(gold-amount < 600)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAMPION)
	(current-age >= imperial-age)
	(not (research-available ri-champion))
=>
	(set-goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
)
; not enough units, skip it
(defrule
	(unit-type-count-total militiaman-line < MILITIA-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-CHAMPION)
=>
	(set-goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAMPION)
	(research-completed ri-champion)
=>
	(set-goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
)
(defrule
	(unit-type-count-total militiaman-line >= MILITIA-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-CHAMPION)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-champion)
=>
	(research ri-champion)
	(chat-local-to-self "1 researching champion")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAMPION)
	(research-available ri-champion)
	(food-amount < 750)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-CHAMPION)
	(research-available ri-champion)
	(gold-amount < 350)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
	(current-age >= imperial-age)
	(not (research-available ri-elite-eagle-warrior))
=>
	(set-goal NEXT-INFANTRY-TECH DONE)
)
(defrule
	(unit-type-count-total eagle-warrior-line < EAGLE-WARRIOR-RESEARCH)
	(goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
	(can-research ri-elite-eagle-warrior)
=>
	(set-goal NEXT-INFANTRY-TECH DONE)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
	(research-completed ri-elite-eagle-warrior)
=>
	(set-goal NEXT-INFANTRY-TECH DONE)
)
(defrule
	(unit-type-count-total eagle-warrior-line >= EAGLE-WARRIOR-RESEARCH)
	(or (goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
		(goal NEXT-INFANTRY-TECH DONE))
	(can-research ri-elite-eagle-warrior)
=>
	(research ri-elite-eagle-warrior)
	(chat-local-to-self "1 researching elite-eagle-warrior")
	(disable-self)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
	(research-available ri-elite-eagle-warrior)
	(food-amount < 800)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
	(research-available ri-elite-eagle-warrior)
	(gold-amount < 500)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CAVALRY-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-CAVALRY-TECH RI-SCALE-BARDING)
	(research-completed ri-scale-barding)
=>
	(set-goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
)
(defrule
	(goal DO-CAVALRY-RESEARCH 1)
	(or (goal NEXT-CAVALRY-TECH RI-SCALE-BARDING)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-scale-barding)
=>
	(research ri-scale-barding)
	(chat-local-to-self "1 researching scale-barding")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-SCALE-BARDING)
	(research-available ri-scale-barding)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
	(current-age >= castle-age)
	(not (research-available ri-light-cavalry))
=>
	(set-goal NEXT-CAVALRY-TECH RI-BLOODLINES)
)
; not enough units, skip it
(defrule
	(unit-type-count-total scout-cavalry-line < SCOUT-CAVALRY-RESEARCH)
	(goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
=>
	(set-goal NEXT-CAVALRY-TECH RI-BLOODLINES)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
	(research-completed ri-light-cavalry)
=>
	(set-goal NEXT-CAVALRY-TECH RI-BLOODLINES)
)
(defrule
	(unit-type-count-total scout-cavalry-line >= SCOUT-CAVALRY-RESEARCH)
	(or (goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-light-cavalry)
=>
	(research ri-light-cavalry)
	(chat-local-to-self "1 researching light-cavalry")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
	(research-available ri-light-cavalry)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
	(research-available ri-light-cavalry)
	(gold-amount < 50)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-BLOODLINES)
	(current-age >= feudal-age)
	(not (research-available ri-bloodlines))
=>
	(set-goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-BLOODLINES)
	(research-completed ri-bloodlines)
=>
	(set-goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
)
(defrule
	(or (goal NEXT-CAVALRY-TECH RI-BLOODLINES)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-bloodlines)
=>
	(research ri-bloodlines)
	(chat-local-to-self "1 researching bloodlines")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-BLOODLINES)
	(research-available ri-bloodlines)
	(food-amount < 150)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-BLOODLINES)
	(research-available ri-bloodlines)
	(gold-amount < 100)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
	(current-age >= castle-age)
	(not (research-available ri-husbandry))
=>
	(set-goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
	(research-completed ri-husbandry)
=>
	(set-goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
)
(defrule
	(or (goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-husbandry)
=>
	(research ri-husbandry)
	(chat-local-to-self "1 researching husbandry")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
	(research-available ri-husbandry)
	(food-amount < 250)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
	(research-completed ri-chain-barding)
=>
	(set-goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
)
(defrule
	(or (goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-chain-barding)
=>
	(research ri-chain-barding)
	(chat-local-to-self "1 researching chain-barding")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
	(research-available ri-chain-barding)
	(food-amount < 250)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
	(research-available ri-chain-barding)
	(gold-amount < 150)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
	(current-age >= imperial-age)
	(not (research-available ri-plate-barding))
=>
	(set-goal NEXT-CAVALRY-TECH RI-CAVALIER)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
	(research-completed ri-plate-barding)
=>
	(set-goal NEXT-CAVALRY-TECH RI-CAVALIER)
)
(defrule
	(or (goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-plate-barding)
=>
	(research ri-plate-barding)
	(chat-local-to-self "1 researching plate-barding")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
	(research-available ri-plate-barding)
	(food-amount < 350)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
	(research-available ri-plate-barding)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-CAVALIER)
	(current-age >= imperial-age)
	(not (research-available ri-cavalier))
=>
	(set-goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
)
(defrule
	(unit-type-count-total knight-line < KNIGHT-RESEARCH)
	(goal NEXT-CAVALRY-TECH RI-CAVALIER)
=>
	(set-goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-CAVALIER)
	(research-completed ri-cavalier)
=>
	(set-goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
)
(defrule
	(unit-type-count-total knight-line >= KNIGHT-RESEARCH)
	(or (goal NEXT-CAVALRY-TECH RI-CAVALIER)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-cavalier)
=>
	(research ri-cavalier)
	(chat-local-to-self "1 researching cavalier")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-CAVALIER)
	(research-available ri-cavalier)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-CAVALIER)
	(research-available ri-cavalier)
	(gold-amount < 300)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
	(current-age >= imperial-age)
	(not (research-available ri-heavy-camel))
=>
	(set-goal NEXT-CAVALRY-TECH RI-HUSSAR)
)
(defrule
	(unit-type-count-total camel-line < CAMEL-RESEARCH)
	(goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
=>
	(set-goal NEXT-CAVALRY-TECH RI-HUSSAR)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
	(research-completed ri-heavy-camel)
=>
	(set-goal NEXT-CAVALRY-TECH RI-HUSSAR)
)
(defrule
	(unit-type-count-total camel-line >= CAMEL-RESEARCH)
	(or (goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-heavy-camel)
=>
	(research ri-heavy-camel)
	(chat-local-to-self "1 researching heavy-camel")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
	(research-available ri-heavy-camel)
	(food-amount < 325)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
	(research-available ri-heavy-camel)
	(gold-amount < 360)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSSAR)
	(current-age >= imperial-age)
	(not (research-available ri-hussar))
=>
	(set-goal NEXT-CAVALRY-TECH RI-PALADIN)
)
(defrule
	(unit-type-count-total scout-cavalry-line < SCOUT-CAVALRY-RESEARCH)
	(goal NEXT-CAVALRY-TECH RI-HUSSAR)
=>
	(set-goal NEXT-CAVALRY-TECH RI-PALADIN)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSSAR)
	(research-completed ri-hussar)
=>
	(set-goal NEXT-CAVALRY-TECH RI-PALADIN)
)
(defrule
	(unit-type-count-total scout-cavalry-line >= SCOUT-CAVALRY-RESEARCH)
	(or (goal NEXT-CAVALRY-TECH RI-HUSSAR)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-hussar)
=>
	(research ri-hussar)
	(chat-local-to-self "1 researching hussar")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSSAR)
	(research-available ri-hussar)
	(food-amount < 500)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-HUSSAR)
	(research-available ri-hussar)
	(gold-amount < 600)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-CAVALRY-TECH RI-PALADIN)
	(current-age >= imperial-age)
	(not (research-available ri-paladin))
=>
	(set-goal NEXT-CAVALRY-TECH DONE)
)
(defrule
	(unit-type-count-total knight-line < KNIGHT-RESEARCH)
	(goal NEXT-CAVALRY-TECH RI-PALADIN)
=>
	(set-goal NEXT-CAVALRY-TECH DONE)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-PALADIN)
	(research-completed ri-paladin)
=>
	(set-goal NEXT-CAVALRY-TECH DONE)
)
(defrule
	(unit-type-count-total knight-line >= KNIGHT-RESEARCH)
	(or (goal NEXT-CAVALRY-TECH RI-PALADIN)
		(goal NEXT-CAVALRY-TECH DONE))
	(can-research ri-paladin)
=>
	(research ri-paladin)
	(chat-local-to-self "1 researching paladin")
	(disable-self)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-PALADIN)
	(research-available ri-paladin)
	(food-amount < 1300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-CAVALRY-TECH RI-PALADIN)
	(research-available ri-paladin)
	(gold-amount < 750)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; SIEGE-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; not enough units, skip it
(defrule
	(unit-type-count-total battering-ram-line < RAM-RESEARCH)
	(goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
	(research-completed ri-capped-ram)
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
)
(defrule
	(unit-type-count-total battering-ram-line >= RAM-RESEARCH)
	(or (goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
		(goal NEXT-SIEGE-TECH DONE))
	(can-research ri-capped-ram)
=>
	(research ri-capped-ram)
	(chat-local-to-self "1 researching capped-ram")
	(disable-self)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
	(research-available ri-capped-ram)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
	(research-available ri-capped-ram)
	(gold-amount < 250)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; can't research, skip it
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
	(current-age >= imperial-age)
	(not (research-available ri-siege-engineers))
=>
	(set-goal NEXT-SIEGE-TECH RI-ONAGER)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
	(research-completed ri-siege-engineers)
=>
	(set-goal NEXT-SIEGE-TECH RI-ONAGER)
)
(defrule
	(or (goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
		(goal NEXT-SIEGE-TECH DONE))
	(can-research ri-siege-engineers)
=>
	(research ri-siege-engineers)
	(chat-local-to-self "1 researching siege-engineers")
	(disable-self)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
	(research-available ri-siege-engineers)
	(food-amount < 500)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
	(research-available ri-siege-engineers)
	(wood-amount < 600)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-SIEGE-TECH RI-ONAGER)
	(current-age >= imperial-age)
	(not (research-available ri-onager))
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
)
(defrule
	(unit-type-count-total mangonel-line < MANGONEL-RESEARCH)
	(goal NEXT-SIEGE-TECH RI-ONAGER)
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-ONAGER)
	(research-completed ri-onager)
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
)
(defrule
	(unit-type-count-total mangonel-line >= MANGONEL-RESEARCH)
	(or (goal NEXT-SIEGE-TECH RI-ONAGER)
		(goal NEXT-SIEGE-TECH DONE))
	(can-research ri-onager)
=>
	(research ri-onager)
	(chat-local-to-self "1 researching onager")
	(disable-self)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-ONAGER)
	(research-available ri-onager)
	(food-amount < 800)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-ONAGER)
	(research-available ri-onager)
	(gold-amount < 500)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
	(current-age >= imperial-age)
	(not (research-available ri-siege-ram))
=>
	(set-goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
)
(defrule
	(unit-type-count-total battering-ram-line < RAM-RESEARCH)
	(goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
=>
	(set-goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
	(research-completed ri-siege-ram)
=>
	(set-goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
)
(defrule
	(unit-type-count-total battering-ram-line >= RAM-RESEARCH)
	(or (goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
		(goal NEXT-SIEGE-TECH DONE))
	(can-research ri-siege-ram)
=>
	(research ri-siege-ram)
	(chat-local-to-self "1 researching siege-ram")
	(disable-self)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
	(research-available ri-siege-ram)
	(food-amount < 1000)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
	(research-available ri-siege-ram)
	(gold-amount < 800)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
	(current-age >= imperial-age)
	(not (research-available ri-heavy-scorpion))
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
)
(defrule
	(unit-type-count-total scorpion-line < SCORPION-RESEARCH)
	(goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
	(research-completed ri-heavy-scorpion)
=>
	(set-goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
)
(defrule
	(unit-type-count-total scorpion-line >= SCORPION-RESEARCH)
	(or (goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
		(goal NEXT-SIEGE-TECH DONE))
	(can-research ri-heavy-scorpion)
=>
	(research ri-heavy-scorpion)
	(chat-local-to-self "1 researching heavy-scorpion")
	(disable-self)
)
(defrule
	(unit-type-count-total scorpion-line >= SCORPION-RESEARCH)
	(goal NEXT-SIEGE-TECH DONE)
	(can-research ri-heavy-scorpion)
=>
	(research ri-heavy-scorpion)
	(chat-local-to-self "1 researching heavy-scorpion")
	(disable-self)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
	(research-available ri-heavy-scorpion)
	(food-amount < 1000)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
	(research-available ri-heavy-scorpion)
	(wood-amount < 1100)
=>
	(set-goal NEED-WOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
	(current-age >= imperial-age)
	(not (research-available ri-siege-onager))
=>
	(set-goal NEXT-SIEGE-TECH DONE)
)
(defrule
	(unit-type-count-total mangonel-line < MANGONEL-RESEARCH)
	(goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
=>
	(set-goal NEXT-SIEGE-TECH DONE)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
	(research-completed ri-siege-onager)
=>
	(set-goal NEXT-SIEGE-TECH DONE)
)
(defrule
	(unit-type-count-total mangonel-line >= MANGONEL-RESEARCH)
	(or (goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
		(goal NEXT-SIEGE-TECH DONE))
	(can-research ri-siege-onager)
=>
	(research ri-siege-onager)
	(chat-local-to-self "1 researching siege-onager")
	(disable-self)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
	(research-available ri-siege-onager)
	(food-amount < 1450)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
	(research-available ri-siege-onager)
	(gold-amount < 1000)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; TOWER-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-TOWER-TECH RI-GUARD-TOWER)
	(research-completed ri-guard-tower)
=>
	(set-goal NEXT-TOWER-TECH RI-KEEP)
)
(defrule
	(or (goal NEXT-TOWER-TECH RI-GUARD-TOWER)
		(goal NEXT-TOWER-TECH DONE))
	(can-research ri-guard-tower)
=>
	(research ri-guard-tower)
	(chat-local-to-self "1 researching guard-tower")
	(disable-self)
)
(defrule
	(goal NEXT-TOWER-TECH RI-GUARD-TOWER)
	(research-available ri-guard-tower)
	(food-amount < 100)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-TOWER-TECH RI-GUARD-TOWER)
	(research-available ri-guard-tower)
	(stone-amount < 250)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-TOWER-TECH RI-KEEP)
	(research-completed ri-keep)
=>
	(set-goal NEXT-TOWER-TECH DONE)
)
(defrule
	(or (goal NEXT-TOWER-TECH RI-KEEP)
		(goal NEXT-TOWER-TECH DONE))
	(can-research ri-keep)
=>
	(research ri-keep)
	(chat-local-to-self "1 researching keep")
	(disable-self)
)
(defrule
	(goal NEXT-TOWER-TECH RI-KEEP)
	(research-available ri-keep)
	(food-amount < 500)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-TOWER-TECH RI-KEEP)
	(research-available ri-keep)
	(stone-amount < 350)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(defrule
;	(goal NEXT-TOWER-TECH RI-BOMBARD-TOWER)
;	(research-completed ri-bombard-tower)
;=>
;	(set-goal NEXT-TOWER-TECH DONE)
;)
;(defrule
;	(or (goal NEXT-TOWER-TECH RI-BOMBARD-TOWER)
;		(goal NEXT-TOWER-TECH DONE))
;	(can-research ri-bombard-tower)
;=>
;	(research ri-bombard-tower)
;	(chat-local-to-self "1 researching bombard-tower")
;	(disable-self)
;)
;(defrule
;	(goal NEXT-TOWER-TECH RI-BOMBARD-TOWER)
;	(research-available ri-bombard-tower)
;	(food-amount < 800)
;=>
;	(set-goal NEED-FOOD 1)
;)
;(defrule
;	(goal NEXT-TOWER-TECH RI-BOMBARD-TOWER)
;	(research-available ri-bombard-tower)
;	(stone-amount < 400)
;=>
;	(set-goal NEED-STONE 1)
;)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; BUILDING-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-BUILDING-TECH RI-TOWN-WATCH)
	(research-completed ri-town-watch)
=>
	(set-goal NEXT-BUILDING-TECH RI-MASONRY)
)
(defrule
	(or (goal NEXT-BUILDING-TECH RI-TOWN-WATCH)
		(goal NEXT-BUILDING-TECH DONE))
	(can-research ri-town-watch)
=>
	(research ri-town-watch)
	(chat-local-to-self "1 researching town-watch")
	(disable-self)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-TOWN-WATCH)
	(research-available ri-town-watch)
	(food-amount < 75)
=>
	(set-goal NEED-FOOD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-BUILDING-TECH RI-MASONRY)
	(current-age >= castle-age)
	(not (research-available ri-masonry))
=>
	(set-goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-MASONRY)
	(research-completed ri-masonry)
=>
	(set-goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
)
(defrule
	(or (goal NEXT-BUILDING-TECH RI-MASONRY)
		(goal NEXT-BUILDING-TECH DONE))
	(can-research ri-masonry)
=>
	(research ri-masonry)
	(chat-local-to-self "1 researching masonry")
	(disable-self)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-MASONRY)
	(research-available ri-masonry)
	(wood-amount < 175)
=>
	(set-goal NEED-WOOD 1)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-MASONRY)
	(research-available ri-masonry)
	(stone-amount < 150)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
	(current-age >= imperial-age)
	(not (research-available ri-architecture))
=>
	(set-goal NEXT-BUILDING-TECH RI-STONECUTTING)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
	(research-completed ri-architecture)
=>
	(set-goal NEXT-BUILDING-TECH RI-STONECUTTING)
)
(defrule
	(or (goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
		(goal NEXT-BUILDING-TECH DONE))
	(can-research ri-architecture)
=>
	(research ri-architecture)
	(chat-local-to-self "1 researching architecture")
	(disable-self)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
	(research-available ri-architecture)
	(wood-amount < 200)
=>
	(set-goal NEED-WOOD 1)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
	(research-available ri-architecture)
	(stone-amount < 300)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-BUILDING-TECH RI-STONECUTTING)
	(current-age >= castle-age)
	(not (research-available ri-stonecutting))
=>
	(set-goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-STONECUTTING)
	(research-completed ri-stonecutting)
=>
	(set-goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
)
(defrule
	(or (goal NEXT-BUILDING-TECH RI-STONECUTTING)
		(goal NEXT-BUILDING-TECH DONE))
	(can-research ri-stonecutting)
=>
	(research ri-stonecutting)
	(chat-local-to-self "1 researching stonecutting")
	(disable-self)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-STONECUTTING)
	(research-available ri-stonecutting)
	(wood-amount < 200)
=>
	(set-goal NEED-WOOD 1)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-STONECUTTING)
	(research-available ri-stonecutting)
	(stone-amount < 300)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
	(research-completed ri-town-patrol)
=>
	(set-goal NEXT-BUILDING-TECH RI-HOARDINGS)
)
(defrule
	(or (goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
		(goal NEXT-BUILDING-TECH DONE))
	(can-research ri-town-patrol)
=>
	(research ri-town-patrol)
	(chat-local-to-self "1 researching town-patrol")
	(disable-self)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
	(research-available ri-town-patrol)
	(food-amount < 300)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
	(research-available ri-town-patrol)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-BUILDING-TECH RI-HOARDINGS)
	(current-age >= imperial-age)
	(not (research-available ri-hoardings))
=>
	(set-goal NEXT-BUILDING-TECH DONE)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-HOARDINGS)
	(research-completed ri-hoardings)
=>
	(set-goal NEXT-BUILDING-TECH DONE)
)
(defrule
	(or (goal NEXT-BUILDING-TECH RI-HOARDINGS)
		(goal NEXT-BUILDING-TECH DONE))
	(can-research ri-hoardings)
=>
	(research ri-hoardings)
	(chat-local-to-self "1 researching hoardings")
	(disable-self)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-HOARDINGS)
	(research-available ri-hoardings)
	(wood-amount < 400)
=>
	(set-goal NEED-WOOD 1)
)
(defrule
	(goal NEXT-BUILDING-TECH RI-HOARDINGS)
	(research-available ri-hoardings)
	(stone-amount < 400)
=>
	(set-goal NEED-STONE 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; MONK-TECH track
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-ILLUMINATION)
	(current-age >= imperial-age)
	(not (research-available ri-illumination))
=>
	(set-goal NEXT-MONK-TECH RI-SANCTITY)
)
(defrule
	(goal NEXT-MONK-TECH RI-ILLUMINATION)
	(research-completed ri-illumination)
=>
	(set-goal NEXT-MONK-TECH RI-SANCTITY)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-ILLUMINATION)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-illumination)
=>
	(research ri-illumination)
	(chat-local-to-self "1 researching illumination")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-ILLUMINATION)
	(research-available ri-illumination)
	(gold-amount < 120)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-SANCTITY)
	(current-age >= castle-age)
	(not (research-available ri-sanctity))
=>
	(set-goal NEXT-MONK-TECH RI-FERVOR)
)
(defrule
	(goal NEXT-MONK-TECH RI-SANCTITY)
	(research-completed ri-sanctity)
=>
	(set-goal NEXT-MONK-TECH RI-FERVOR)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-SANCTITY)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-sanctity)
=>
	(research ri-sanctity)
	(chat-local-to-self "1 researching sanctity")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-SANCTITY)
	(research-available ri-sanctity)
	(gold-amount < 120)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-FERVOR)
	(research-completed ri-fervor)
=>
	(set-goal NEXT-MONK-TECH RI-BLOCK-PRINTING)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-FERVOR)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-fervor)
=>
	(research ri-fervor)
	(chat-local-to-self "1 researching fervor")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-FERVOR)
	(research-available ri-fervor)
	(gold-amount < 140)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-BLOCK-PRINTING)
	(current-age >= imperial-age)
	(not (research-available ri-block-printing))
=>
	(set-goal NEXT-MONK-TECH RI-ATONEMENT)
)
(defrule
	(goal NEXT-MONK-TECH RI-BLOCK-PRINTING)
	(research-completed ri-block-printing)
=>
	(set-goal NEXT-MONK-TECH RI-ATONEMENT)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-BLOCK-PRINTING)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-block-printing)
=>
	(research ri-block-printing)
	(chat-local-to-self "1 researching block-printing")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-BLOCK-PRINTING)
	(research-available ri-block-printing)
	(gold-amount < 200)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-ATONEMENT)
	(current-age >= castle-age)
	(not (research-available ri-atonement))
=>
;	(set-goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
	(set-goal NEXT-MONK-TECH RI-REDEMPTION)
)
(defrule
	(goal NEXT-MONK-TECH RI-ATONEMENT)
	(research-completed ri-atonement)
=>
;	(set-goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
	(set-goal NEXT-MONK-TECH RI-REDEMPTION)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-ATONEMENT)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-atonement)
=>
	(research ri-atonement)
	(chat-local-to-self "1 researching atonement")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-ATONEMENT)
	(research-available ri-atonement)
	(gold-amount < 325)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; herbal-medicine not recognized ?
;(defrule
;	(goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
;	(current-age >= castle-age)
;	(not (research-available ri-herbal-medicine))
;=>
;	(set-goal NEXT-MONK-TECH RI-REDEMPTION)
;)
;(defrule
;	(goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
;	(research-completed ri-herbal-medicine)
;=>
;	(set-goal NEXT-MONK-TECH RI-REDEMPTION)
;)
;(defrule
;	(unit-type-count-total monk > MONK-RESEARCH)
;	(goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
;	(can-research ri-herbal-medicine)
;=>
;	(research ri-herbal-medicine)
;	(chat-local-to-self "1 researching herbal-medicine")
;	(disable-self)
;)
;(defrule
;	(goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
;	(research-available ri-herbal-medicine)
;	(gold-amount < 350)
;=>
;	(set-goal NEED-GOLD 1)
;)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-REDEMPTION)
	(current-age >= castle-age)
	(not (research-available ri-redemption))
=>
	(set-goal NEXT-MONK-TECH RI-HERESY)
)
(defrule
	(goal NEXT-MONK-TECH RI-REDEMPTION)
	(research-completed ri-redemption)
=>
	(set-goal NEXT-MONK-TECH RI-HERESY)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-REDEMPTION)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-redemption)
=>
	(research ri-redemption)
	(chat-local-to-self "1 researching redemption")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-REDEMPTION)
	(research-available ri-redemption)
	(gold-amount < 475)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-HERESY)
	(current-age >= castle-age)
	(not (research-available ri-heresy))
=>
	(set-goal NEXT-MONK-TECH RI-THEOCRACY)
)
(defrule
	(goal NEXT-MONK-TECH RI-HERESY)
	(research-completed ri-heresy)
=>
	(set-goal NEXT-MONK-TECH RI-THEOCRACY)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-HERESY)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-heresy)
=>
	(research ri-heresy)
	(chat-local-to-self "1 researching heresy")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-HERESY)
	(research-available ri-heresy)
	(gold-amount < 1000)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-THEOCRACY)
	(current-age >= imperial-age)
	(not (research-available ri-theocracy))
=>
	(set-goal NEXT-MONK-TECH RI-FAITH)
)
(defrule
	(goal NEXT-MONK-TECH RI-THEOCRACY)
	(research-completed ri-theocracy)
=>
	(set-goal NEXT-MONK-TECH RI-FAITH)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-THEOCRACY)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-theocracy)
=>
	(research ri-theocracy)
	(chat-local-to-self "1 researching theocracy")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-THEOCRACY)
	(research-available ri-theocracy)
	(food-amount < 400)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MONK-TECH RI-THEOCRACY)
	(research-available ri-theocracy)
	(gold-amount < 800)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defrule
	(goal NEXT-MONK-TECH RI-FAITH)
	(research-completed ri-faith)
=>
	(set-goal NEXT-MONK-TECH DONE)
)
(defrule
	(unit-type-count-total monk > MONK-RESEARCH)
	(or (goal NEXT-MONK-TECH RI-FAITH)
		(goal NEXT-MONK-TECH DONE))
	(can-research ri-faith)
=>
	(research ri-faith)
	(chat-local-to-self "1 researching faith")
	(disable-self)
)
(defrule
	(goal NEXT-MONK-TECH RI-FAITH)
	(research-available ri-faith)
	(food-amount < 750)
=>
	(set-goal NEED-FOOD 1)
)
(defrule
	(goal NEXT-MONK-TECH RI-FAITH)
	(research-available ri-faith)
	(gold-amount < 1000)
=>
	(set-goal NEED-GOLD 1)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; DEBUG TECH
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-LOOM)
=>
	(chat-local-to-self "ECONOMIC: ri-loom")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-DOUBLE-BIT-AXE)
=>
	(chat-local-to-self "ECONOMIC: ri-double-bit-axe")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-HORSE-COLLAR)
=>
	(chat-local-to-self "ECONOMIC: ri-horse-collar")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-GOLD-MINING)
=>
	(chat-local-to-self "ECONOMIC: ri-gold-mining")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-STONE-MINING)
=>
	(chat-local-to-self "ECONOMIC: ri-stone-mining")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-CARTOGRAPHY)
=>
	(chat-local-to-self "ECONOMIC: ri-cartography")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-COINAGE)
=>
	(chat-local-to-self "ECONOMIC: ri-coinage")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-WHEEL-BARROW)
=>
	(chat-local-to-self "ECONOMIC: ri-wheel-barrow")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-BOW-SAW)
=>
	(chat-local-to-self "ECONOMIC: ri-bow-saw")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-HEAVY-PLOW)
=>
	(chat-local-to-self "ECONOMIC: ri-heavy-plow")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-BANKING)
=>
	(chat-local-to-self "ECONOMIC: ri-banking")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-CONSCRIPTION)
=>
	(chat-local-to-self "ECONOMIC: ri-conscription")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-GOLD-SHAFT-MINING)
=>
	(chat-local-to-self "ECONOMIC: ri-gold-shaft-mining")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-STONE-SHAFT-MINING)
=>
	(chat-local-to-self "ECONOMIC: ri-stone-shaft-mining")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-CARAVAN)
=>
	(chat-local-to-self "ECONOMIC: ri-caravan")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-CROP-ROTATION)
=>
	(chat-local-to-self "ECONOMIC: ri-crop-rotation")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-GUILDS)
=>
	(chat-local-to-self "ECONOMIC: ri-guilds")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-HAND-CART)
=>
	(chat-local-to-self "ECONOMIC: ri-hand-cart")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-TWO-MAN-SAW)
=>
	(chat-local-to-self "ECONOMIC: ri-two-man-saw")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ECONOMIC-TECH RI-SAPPERS)
=>
	(chat-local-to-self "ECONOMIC: ri-sappers")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MISSILE-TECH RI-FLETCHING)
=>
	(chat-local-to-self "MISSILE: ri-fletching")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MISSILE-TECH RI-BODKIN-ARROW)
=>
	(chat-local-to-self "MISSILE: ri-bodkin-arrow")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MISSILE-TECH RI-MURDER-HOLES)
=>
	(chat-local-to-self "MISSILE: ri-murder-holes")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MISSILE-TECH RI-BALLISTICS)
=>
	(chat-local-to-self "MISSILE: ri-ballistics")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MISSILE-TECH RI-BRACER)
=>
	(chat-local-to-self "MISSILE: ri-bracer")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MISSILE-TECH RI-CHEMISTRY)
=>
	(chat-local-to-self "MISSILE: ri-chemistry")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-PADDED-ARCHER-ARMOR)
=>
	(chat-local-to-self "ARCHER: ri-padded-archer-armor")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-CROSSBOW)
=>
	(chat-local-to-self "ARCHER: ri-crossbow")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-LEATHER-ARCHER-ARMOR)
=>
	(chat-local-to-self "ARCHER: ri-leather-archer-armor")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-ELITE-SKIRMISHER)
=>
	(chat-local-to-self "ARCHER: ri-elite-skirmisher")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-RING-ARCHER-ARMOR)
=>
	(chat-local-to-self "ARCHER: ri-ring-archer-armor")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-THUMB-RING)
=>
	(chat-local-to-self "ARCHER: ri-thumb-ring")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-ARBALEST)
=>
	(chat-local-to-self "ARCHER: ri-arbalest")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-ARCHER-TECH RI-HEAVY-CAVALRY-ARCHER)
=>
	(chat-local-to-self "ARCHER: ri-heavy-cavalry-archer")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-TRACKING)
=>
	(chat-local-to-self "INFANTRY: ri-tracking")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-SCALE-MAIL)
=>
	(chat-local-to-self "INFANTRY: ri-scale-mail")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-MAN-AT-ARMS)
=>
	(chat-local-to-self "INFANTRY: ri-man-at-arms")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-FORGING)
=>
	(chat-local-to-self "INFANTRY: ri-forging")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-SQUIRES)
=>
	(chat-local-to-self "INFANTRY: ri-squires")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-LONG-SWORDSMAN)
=>
	(chat-local-to-self "INFANTRY: ri-long-swordsman")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-CHAIN-MAIL)
=>
	(chat-local-to-self "INFANTRY: ri-chain-mail")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-PIKEMAN)
=>
	(chat-local-to-self "INFANTRY: ri-pikeman")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-IRON-CASTING)
=>
	(chat-local-to-self "INFANTRY: ri-iron-casting")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-TWO-HANDED-SWORDSMAN)
=>
	(chat-local-to-self "INFANTRY: ri-two-handed-swordsman")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-PLATE-MAIL)
=>
	(chat-local-to-self "INFANTRY: ri-plate-mail")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-BLAST-FURNACE)
=>
	(chat-local-to-self "INFANTRY: ri-blast-furnace")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-HALBERDIER)
=>
	(chat-local-to-self "INFANTRY: ri-halberdier")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-CHAMPION)
=>
	(chat-local-to-self "INFANTRY: ri-champion")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-INFANTRY-TECH RI-ELITE-EAGLE-WARRIOR)
=>
	(chat-local-to-self "INFANTRY: ri-elite-eagle-warrior")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-SCALE-BARDING)
=>
	(chat-local-to-self "CAVALRY: ri-scale-barding")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-LIGHT-CAVALRY)
=>
	(chat-local-to-self "CAVALRY: ri-light-cavalry")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-BLOODLINES)
=>
	(chat-local-to-self "CAVALRY: ri-bloodlines")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-HUSBANDRY)
=>
	(chat-local-to-self "CAVALRY: ri-husbandry")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-CHAIN-BARDING)
=>
	(chat-local-to-self "CAVALRY: ri-chain-barding")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-PLATE-BARDING)
=>
	(chat-local-to-self "CAVALRY: ri-plate-barding")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-CAVALIER)
=>
	(chat-local-to-self "CAVALRY: ri-cavalier")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-HEAVY-CAMEL)
=>
	(chat-local-to-self "CAVALRY: ri-heavy-camel")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-HUSSAR)
=>
	(chat-local-to-self "CAVALRY: ri-hussar")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-CAVALRY-TECH RI-PALADIN)
=>
	(chat-local-to-self "CAVALRY: ri-paladin")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-SIEGE-TECH RI-CAPPED-RAM)
=>
	(chat-local-to-self "SIEGE: ri-capped-ram")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-SIEGE-TECH RI-SIEGE-ENGINEERS)
=>
	(chat-local-to-self "SIEGE: ri-siege-engineers")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-SIEGE-TECH RI-ONAGER)
=>
	(chat-local-to-self "SIEGE: ri-onager")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-SIEGE-TECH RI-SIEGE-RAM)
=>
	(chat-local-to-self "SIEGE: ri-siege-ram")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-SIEGE-TECH RI-HEAVY-SCORPION)
=>
	(chat-local-to-self "SIEGE: ri-heavy-scorpion")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-SIEGE-TECH RI-SIEGE-ONAGER)
=>
	(chat-local-to-self "SIEGE: ri-siege-onager")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-TOWER-TECH RI-GUARD-TOWER)
=>
	(chat-local-to-self "TOWER: ri-guard-tower")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-TOWER-TECH RI-KEEP)
=>
	(chat-local-to-self "TOWER: ri-keep")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-TOWER-TECH RI-BOMBARD-TOWER)
=>
	(chat-local-to-self "TOWER: ri-bombard-tower")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-BUILDING-TECH RI-TOWN-WATCH)
=>
	(chat-local-to-self "BUILDING: ri-town-watch")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-BUILDING-TECH RI-MASONRY)
=>
	(chat-local-to-self "BUILDING: ri-masonry")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-BUILDING-TECH RI-ARCHITECTURE)
=>
	(chat-local-to-self "BUILDING: ri-architecture")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-BUILDING-TECH RI-STONECUTTING)
=>
	(chat-local-to-self "BUILDING: ri-stonecutting")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-BUILDING-TECH RI-TOWN-PATROL)
=>
	(chat-local-to-self "BUILDING: ri-town-patrol")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-BUILDING-TECH RI-HOARDINGS)
=>
	(chat-local-to-self "BUILDING: ri-hoardings")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-ILLUMINATION)
=>
	(chat-local-to-self "MONK: ri-illumination")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-SANCTITY)
=>
	(chat-local-to-self "MONK: ri-sanctity")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-FERVOR)
=>
	(chat-local-to-self "MONK: ri-fervor")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-BLOCK-PRINTING)
=>
	(chat-local-to-self "MONK: ri-block-printing")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-ATONEMENT)
=>
	(chat-local-to-self "MONK: ri-atonement")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-HERBAL-MEDICINE)
=>
	(chat-local-to-self "MONK: ri-herbal-medicine")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-REDEMPTION)
=>
	(chat-local-to-self "MONK: ri-redemption")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-HERESY)
=>
	(chat-local-to-self "MONK: ri-heresy")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-THEOCRACY)
=>
	(chat-local-to-self "MONK: ri-theocracy")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
	(goal NEXT-MONK-TECH RI-FAITH)
=>
	(chat-local-to-self "MONK: ri-faith")
)

(defrule
	(timer-triggered RESEARCH-DBG-TIMER)
=>
	(disable-timer RESEARCH-DBG-TIMER)
	(enable-timer RESEARCH-DBG-TIMER RESEARCH-DBG-TIMER-INT)
)

(defrule
	(true)
=>
	(enable-timer RESEARCH-DBG-TIMER RESEARCH-DBG-TIMER-INT)
	(disable-self)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; sell excess food
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(food-amount > MAX-FOOD)
    (can-sell-commodity food)
=>
	(chat-local-to-self "excess food")
	(sell-commodity food)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; use excess wood
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(goal WERE-WINNING 1)
	(wood-amount > MAX-WOOD)
	(building-type-count-total barracks < MAX-BARRACKS)
	(can-build barracks)
=>
	(chat-local-to-self "excess wood - build-forward barracks")
	(build-forward barracks)
)

(defrule
	(goal WERE-WINNING 0)
	(wood-amount > MAX-WOOD)
	(building-type-count-total barracks < MAX-BARRACKS)
	(can-build barracks)
=>
	(chat-local-to-self "excess wood - build barracks")
	(build barracks)
)

(defrule
	(goal WERE-WINNING 1)
	(wood-amount > MAX-WOOD)
	(building-type-count-total archery-range < MAX-ARCHERY-RANGES)
	(can-build archery-range)
=>
	(chat-local-to-self "excess wood - build-forward archery-range")
	(build-forward archery-range)
)

(defrule
	(goal WERE-WINNING 0)
	(wood-amount > MAX-WOOD)
	(building-type-count-total archery-range < MAX-ARCHERY-RANGES)
	(can-build archery-range)
=>
	(chat-local-to-self "excess wood - build archery-range")
	(build archery-range)
)

(defrule
	(goal WERE-WINNING 1)
	(wood-amount > MAX-WOOD)
	(building-type-count-total stable < MAX-STABLES)
	(can-build stable)
=>
	(chat-local-to-self "excess wood - build-forward stable")
	(build-forward stable)
)

(defrule
	(goal WERE-WINNING 0)
	(wood-amount > MAX-WOOD)
	(building-type-count-total stable < MAX-STABLES)
	(can-build stable)
=>
	(chat-local-to-self "excess wood - build stable")
	(build stable)
)

(defrule
	(goal WERE-WINNING 1)
	(wood-amount > MAX-WOOD)
	(building-type-count-total siege-workshop < MAX-SIEGE-WORKSHOPS)
	(can-build siege-workshop)
=>
	(chat-local-to-self "excess wood - build-forward siege-workshop")
	(build-forward siege-workshop)
)

(defrule
	(goal WERE-WINNING 0)
	(wood-amount > MAX-WOOD)
	(building-type-count-total siege-workshop < MAX-SIEGE-WORKSHOPS)
	(can-build siege-workshop)
=>
	(chat-local-to-self "excess wood - build siege-workshop")
	(build siege-workshop)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; sell excess wood
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(wood-amount > MAX-WOOD)
	(building-type-count-total barracks >= MAX-BARRACKS)
	(building-type-count-total archery-range >= MAX-ARCHERY-RANGES)
	(building-type-count-total stable >= MAX-STABLES)
	(building-type-count-total siege-workshop >= MAX-SIEGE-WORKSHOPS)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-local-to-self "excess wood - sell")
)

(defrule
	(wood-amount > SELL-MAX-WOOD)
	(can-sell-commodity wood)
=>
	(sell-commodity wood)
	(chat-local-to-self "excess wood - sell")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; stone shortage
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; buy stone - shortage
(defrule
	(stone-amount < 100)
	(gold-amount > 500)
	(can-buy-commodity stone)
=>
	(buy-commodity stone)
	(chat-local-to-self "stone shortage - buy")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; food shortage
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; buy food - shortage
(defrule
	(current-age == imperial-age)
	(food-amount < IMPERIAL-AGE-FOOD-GOAL)
	(gold-amount > IMPERIAL-AGE-GOLD-GOAL)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-local-to-self "food shortage - buy")
)

(defrule
	(current-age == imperial-age)
	(food-amount < 1000)
	(gold-amount > 1000)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-local-to-self "food shortage - buy")
)

(defrule
	(current-age == imperial-age)
	(food-amount < 800)
	(gold-amount > 800)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-local-to-self "food shortage - buy")
)

(defrule
	(current-age == imperial-age)
	(food-amount < 500)
	(gold-amount > 500)
	(can-buy-commodity food)
=>
	(buy-commodity food)
	(chat-local-to-self "food shortage - buy")
)



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; rush villager assignments
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defconst VILLAGERS-TO-USE-GOALS 25)

(defrule
	(unit-type-count-total villager <= 8)
=>
	(set-strategic-number sn-food-gatherer-percentage  100)
	(set-strategic-number sn-wood-gatherer-percentage    0)
	(set-strategic-number sn-gold-gatherer-percentage    0)
	(set-strategic-number sn-stone-gatherer-percentage   0)
)

(defrule
	(unit-type-count-total villager > 8)
	(unit-type-count-total villager <= 14)
=>
	(set-strategic-number sn-food-gatherer-percentage   90)
	(set-strategic-number sn-wood-gatherer-percentage   10)
	(set-strategic-number sn-gold-gatherer-percentage    0)
	(set-strategic-number sn-stone-gatherer-percentage   0)
)

(defrule
	(unit-type-count-total villager > 14)
	(unit-type-count-total villager <= 16)
=>
	(set-strategic-number sn-food-gatherer-percentage   75)
	(set-strategic-number sn-wood-gatherer-percentage   25)
	(set-strategic-number sn-gold-gatherer-percentage    0)
	(set-strategic-number sn-stone-gatherer-percentage   0)
)

(defrule
	(unit-type-count-total villager > 16)
	(unit-type-count-total villager <= 18)
=>
	(set-strategic-number sn-food-gatherer-percentage   67)
	(set-strategic-number sn-wood-gatherer-percentage   33)
	(set-strategic-number sn-gold-gatherer-percentage    0)
	(set-strategic-number sn-stone-gatherer-percentage   0)
)

(defrule
	(current-age == dark-age)
	(unit-type-count-total villager > 18)
=>
	(set-strategic-number sn-food-gatherer-percentage   60)
	(set-strategic-number sn-wood-gatherer-percentage   40)
	(set-strategic-number sn-gold-gatherer-percentage    0)
	(set-strategic-number sn-stone-gatherer-percentage   0)
)

(defrule
	(unit-type-count-total villager > 18)
	(unit-type-count-total villager < VILLAGERS-TO-USE-GOALS)
	(current-age >= feudal-age)
=>
	(set-strategic-number sn-food-gatherer-percentage  40)
	(set-strategic-number sn-wood-gatherer-percentage  40)
	(set-strategic-number sn-gold-gatherer-percentage  20)
	(set-strategic-number sn-stone-gatherer-percentage  0)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; resource based villager assignments
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;0000
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  40)
	(set-strategic-number sn-wood-gatherer-percentage  35)
	(set-strategic-number sn-gold-gatherer-percentage  25)
	(set-strategic-number sn-stone-gatherer-percentage 10)
;	(chat-local-to-self "fwgs")
)

;1000
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  85)
	(set-strategic-number sn-wood-gatherer-percentage  15)
	(set-strategic-number sn-gold-gatherer-percentage  0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
;	(chat-local-to-self "Fwgs")
)

;0100
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  25)
	(set-strategic-number sn-wood-gatherer-percentage  75)
	(set-strategic-number sn-gold-gatherer-percentage  0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
;	(chat-local-to-self "fWgs")
)

;1100
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  60)
	(set-strategic-number sn-wood-gatherer-percentage  40)
	(set-strategic-number sn-gold-gatherer-percentage  0)
	(set-strategic-number sn-stone-gatherer-percentage 0)
;	(chat-local-to-self "FWgs")
)

;0010
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  30)
	(set-strategic-number sn-wood-gatherer-percentage  15)
	(set-strategic-number sn-gold-gatherer-percentage  50)
	(set-strategic-number sn-stone-gatherer-percentage 5)
;	(chat-local-to-self "fwGs")
)

;1010
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  50)
	(set-strategic-number sn-wood-gatherer-percentage  15)
	(set-strategic-number sn-gold-gatherer-percentage  30)
	(set-strategic-number sn-stone-gatherer-percentage 5)
;	(chat-local-to-self "FwGs")
)

;0110
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  20)
	(set-strategic-number sn-wood-gatherer-percentage  45)
	(set-strategic-number sn-gold-gatherer-percentage  30)
	(set-strategic-number sn-stone-gatherer-percentage 5)
;	(chat-local-to-self "fWGs")
)

;1110
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(set-strategic-number sn-food-gatherer-percentage  45)
	(set-strategic-number sn-wood-gatherer-percentage  35)
	(set-strategic-number sn-gold-gatherer-percentage  17)
	(set-strategic-number sn-stone-gatherer-percentage 3)
;	(chat-local-to-self "FWGs")
)

;0001
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  30)
	(set-strategic-number sn-wood-gatherer-percentage  20)
	(set-strategic-number sn-gold-gatherer-percentage  10)
	(set-strategic-number sn-stone-gatherer-percentage 40)
;	(chat-local-to-self "fwgS")
)

;1001
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  55)
	(set-strategic-number sn-wood-gatherer-percentage  15)
	(set-strategic-number sn-gold-gatherer-percentage  10)
	(set-strategic-number sn-stone-gatherer-percentage 20)
;	(chat-local-to-self "FwgS")
)

;0101
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  20)
	(set-strategic-number sn-wood-gatherer-percentage  50)
	(set-strategic-number sn-gold-gatherer-percentage  10)
	(set-strategic-number sn-stone-gatherer-percentage 20)
;	(chat-local-to-self "fWgS")
)

;1101
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  40)
	(set-strategic-number sn-wood-gatherer-percentage  40)
	(set-strategic-number sn-gold-gatherer-percentage  10)
	(set-strategic-number sn-stone-gatherer-percentage 10)
;	(chat-local-to-self "FWgS")
)

;0011
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  15)
	(set-strategic-number sn-wood-gatherer-percentage  10)
	(set-strategic-number sn-gold-gatherer-percentage  50)
	(set-strategic-number sn-stone-gatherer-percentage 25)
;	(chat-local-to-self "fwGS")
)

;1011
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  35)
	(set-strategic-number sn-wood-gatherer-percentage  15)
	(set-strategic-number sn-gold-gatherer-percentage  30)
	(set-strategic-number sn-stone-gatherer-percentage 20)
;	(chat-local-to-self "FwGS")
)

;0111
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  20)
	(set-strategic-number sn-wood-gatherer-percentage  40)
	(set-strategic-number sn-gold-gatherer-percentage  28)
	(set-strategic-number sn-stone-gatherer-percentage 12)
;	(chat-local-to-self "fWGS")
)

;1111
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(set-strategic-number sn-food-gatherer-percentage  35)
	(set-strategic-number sn-wood-gatherer-percentage  40)
	(set-strategic-number sn-gold-gatherer-percentage  17)
	(set-strategic-number sn-stone-gatherer-percentage 8)
;	(chat-local-to-self "FWGS")
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; DBG villager assignments
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;0000
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "fwgs")
)

;1000
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "Fwgs")
)

;0100
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "fWgs")
)

;1100
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "FWgs")
)

;0010
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "fwGs")
)

;1010
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "FwGs")
)

;0110
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "fWGs")
)

;1110
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 0)
=>
	(chat-local-to-self "FWGs")
)

;0001
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "fwgS")
)

;1001
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "FwgS")
)

;0101
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "fWgS")
)

;1101
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 0)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "FWgS")
)

;0011
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "fwGS")
)

;1011
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 0)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "FwGS")
)

;0111
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 0)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "fWGS")
)

;1111
(defrule
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(timer-triggered RESOURCE-DBG-TIMER)
	(goal NEED-FOOD 1)
	(goal NEED-WOOD 1)
	(goal NEED-GOLD 1)
	(goal NEED-STONE 1)
=>
	(chat-local-to-self "FWGS")
)

(defrule
	(timer-triggered RESOURCE-DBG-TIMER)
=>
	(disable-timer RESOURCE-DBG-TIMER)
	(enable-timer RESOURCE-DBG-TIMER RESOURCE-DBG-TIMER-INT)
)

(defrule
	(true)
=>
	(enable-timer RESOURCE-DBG-TIMER RESOURCE-DBG-TIMER-INT)
	(disable-self)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; escrow
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(current-age == imperial-age)
	(goal ESCROW-FOOD 1)
=>
	(set-goal ESCROW-FOOD 0)
	(release-escrow food)
	(chat-local-to-self "escrow food in imperial not needed")
)

(defrule
	(current-age == imperial-age)
	(goal ESCROW-WOOD 1)
=>
	(set-goal ESCROW-WOOD 0)
	(release-escrow wood)
	(chat-local-to-self "escrow wood in imperial not needed")
)

(defrule
	(current-age == imperial-age)
	(goal ESCROW-GOLD 1)
=>
	(set-goal ESCROW-GOLD 0)
	(release-escrow gold)
	(chat-local-to-self "escrow gold in imperial not needed")
)

(defrule
	(current-age == imperial-age)
	(goal ESCROW-STONE 1)
=>
	(set-goal ESCROW-STONE 0)
	(release-escrow stone)
	(chat-local-to-self "escrow stone in imperial not needed")
)

(defrule
	(goal ESCROW-FOOD 1)
=>
	(set-escrow-percentage food 50)
)

(defrule
	(goal ESCROW-FOOD 0)
=>
	(set-escrow-percentage food 0)
)

(defrule
	(goal ESCROW-WOOD 1)
=>
	(set-escrow-percentage wood 50)
)

(defrule
	(goal ESCROW-WOOD 0)
=>
	(set-escrow-percentage wood 0)
)

(defrule
	(goal ESCROW-GOLD 1)
=>
	(set-escrow-percentage gold 50)
)

(defrule
	(goal ESCROW-GOLD 0)
=>
	(set-escrow-percentage gold 0)
)

(defrule
	(goal ESCROW-STONE 1)
=>
	(set-escrow-percentage stone 50)
)

(defrule
	(goal ESCROW-STONE 0)
=>
	(set-escrow-percentage stone 0)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; ask for tribute
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(shared-goal NEED-FOOD 0)
	(goal NEED-FOOD 1)
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(building-type-count-total market >= 1)
=>
	(set-shared-goal NEED-FOOD my-player-number)
)

(defrule
	(shared-goal NEED-WOOD 0)
	(goal NEED-WOOD 1)
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(building-type-count-total market >= 1)
=>
	(set-shared-goal NEED-WOOD my-player-number)
)

(defrule
	(shared-goal NEED-GOLD 0)
	(goal NEED-GOLD 1)
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(building-type-count-total market >= 1)
=>
	(set-shared-goal NEED-GOLD my-player-number)
)

(defrule
	(shared-goal NEED-STONE 0)
	(goal NEED-STONE 1)
	(unit-type-count-total villager >= VILLAGERS-TO-USE-GOALS)
	(building-type-count-total market >= 1)
=>
	(set-shared-goal NEED-STONE my-player-number)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; change our mind
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(shared-goal NEED-FOOD my-player-number)
	(goal NEED-FOOD 0)
=>
	(set-shared-goal NEED-FOOD 0)
)

(defrule
	(shared-goal NEED-WOOD my-player-number)
	(goal NEED-WOOD 0)
=>
	(set-shared-goal NEED-WOOD 0)
)

(defrule
	(shared-goal NEED-GOLD my-player-number)
	(goal NEED-GOLD 0)
=>
	(set-shared-goal NEED-GOLD 0)
)

(defrule
	(shared-goal NEED-STONE my-player-number)
	(goal NEED-STONE 0)
=>
	(set-shared-goal NEED-STONE 0)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; hand it over
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(not (shared-goal NEED-FOOD 0))
	(goal NEED-FOOD 0)
=>
	(tribute-to-player every-ally food 20)
	(set-shared-goal NEED-FOOD 0)
)

(defrule
	(not (shared-goal NEED-WOOD 0))
	(goal NEED-WOOD 0)
=>
	(tribute-to-player every-ally wood 20)
	(set-shared-goal NEED-WOOD 0)
)

(defrule
	(not (shared-goal NEED-GOLD 0))
	(goal NEED-GOLD 0)
=>
	(tribute-to-player every-ally gold 20)
	(set-shared-goal NEED-GOLD 0)
)

(defrule
	(not (shared-goal NEED-STONE 0))
	(goal NEED-STONE 0)
=>
	(tribute-to-player every-ally stone 20)
	(set-shared-goal NEED-STONE 0)
)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; attack strategy
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defrule
	(town-under-attack)
=>
	(set-strategic-number sn-percent-attack-soldiers 0)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(set-shared-goal ATTACK 0)
	(attack-now)
	(set-goal ATTACK-TIMER-ENABLED 0)
	(disable-timer ATTACK-TIMER)
)

(defrule
	(timer-triggered ATTACK-TIMER)
	(not (town-under-attack))
	(goal WERE-WINNING 1)
=>
	(set-shared-goal ATTACK 100)
	(set-goal ATTACK-TIMER-ENABLED 0)
	(disable-timer ATTACK-TIMER)
)

(defrule
	(timer-triggered ATTACK-TIMER)
	(not (town-under-attack))
	(goal WERE-WINNING 0)
=>
	(set-shared-goal ATTACK 50)
	(set-goal ATTACK-TIMER-ENABLED 0)
	(disable-timer ATTACK-TIMER)
)

(defrule
	(not (shared-goal ATTACK 0))
	(goal ATTACK-TIMER-ENABLED 0)
	(military-population > 50)
	(goal WERE-WINNING 1)
=>
	(chat-local-to-self "military population exceeds 50, attack in 2 min")
	(set-goal ATTACK-TIMER-ENABLED 1)
	(enable-timer ATTACK-TIMER 120)
)

(defrule
	(shared-goal ATTACK 0)
	(goal ATTACK-TIMER-ENABLED 0)
	(population >= 115)
=>
	(chat-local-to-self "population exceeds 115, attack decision in 5 min")
	(set-goal ATTACK-TIMER-ENABLED 1)
	(enable-timer ATTACK-TIMER 300)
)

(defrule
	(shared-goal ATTACK 100)
=>
	(chat-local-to-self "attack now w/everything")
	(set-strategic-number sn-percent-attack-soldiers 100)
	(set-strategic-number sn-task-ungrouped-soldiers 1)
	(attack-now)
)

(defrule
	(shared-goal ATTACK 50)
=>
	(chat-local-to-self "attack now w/half")
	(set-strategic-number sn-percent-attack-soldiers 50)
	(set-strategic-number sn-task-ungrouped-soldiers 0)
	(attack-now)
)
